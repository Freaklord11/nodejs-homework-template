"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[54358],{971599:function(e,t){var i,n;Object.defineProperty(t,"__esModule",{value:!0}),t.lintDiagnosticToIssues=t.issuesToLintDiagnostics=t.VALID_LINT_DISMISSAL_TYPES_FOR_ERROR_DISMISSAL=t.LINT_DISMISSAL_TYPE_TO_PERSIST=t.LintDismissalType=t.LintSeverity=void 0,t.LintSeverity=i,function(e){e.INFO="INFO",e.WARNING="WARNING",e.ERROR="ERROR",e.DISMISSABLE_ERROR="DISMISSABLE_ERROR",e.DEBUG="DEBUG",e.RUNTIME_EXCEPTION="RUNTIME_EXCEPTION",e.BLOCK_EDITING="BLOCK_EDITING"}(i||(t.LintSeverity=i={}));class r{constructor(e,t,i={},n=!1){this.id=e,this.severity=t,this.data=i,this.experimental=n,this.createdAt=new Date}}t.LintDiagnostic=r,r.MAX_ELAPSED_TIME_MS=6e5,t.LintDismissalType=n,function(e){e.Acknowledged="acknowledged",e.Rejected="rejected",e.Autofixed="autofixed"}(n||(t.LintDismissalType=n={}));const o=Object.freeze([n.Rejected,n.Autofixed]);t.LINT_DISMISSAL_TYPE_TO_PERSIST=o;const s=Object.freeze([n.Rejected,n.Autofixed]);t.VALID_LINT_DISMISSAL_TYPES_FOR_ERROR_DISMISSAL=s;t.issuesToLintDiagnostics=e=>e.filter((e=>e?.lintIssues?.length??!1)).map((e=>new r(e.linterId??"",e?.severity??i.WARNING,{message:e?.message??"",taskComponentAnnotations:e.lintIssues})));t.lintDiagnosticToIssues=e=>e.filter((e=>e.data.taskComponentAnnotations)).flatMap((e=>e.data.taskComponentAnnotations)).map((e=>({[e.id]:e})))},173995:function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.disagreementFeedbackTemplate=t.OUTPUT_SYSTEM_INSTRUCTIONS=t.OUTPUT_FORMAT_BLOCK=t.validAutoFeedbackStepTypes=t.globalAllowedChatVariablesByStep=t.RESPONSE_INDEX_REGEX=t.DefaultGlobalVariable=t.AutoFeedbackItemStatus=t.AutoFeedbackCategory=void 0;var n,r,o,s=i(232095);t.AutoFeedbackCategory=n,function(e){e.GRAMMAR="Grammar",e.FACTUALITY="Factuality",e.QUALITY="Quality",e.INSTRUCTIONS="Instructions",e.CREATIVITY="Creativity",e.AP_STYLE="AP Style",e.FORMATTING="Formatting"}(n||(t.AutoFeedbackCategory=n={})),t.AutoFeedbackItemStatus=r,function(e){e.FIXED="Fixed",e.IGNORED="Ignored",e.RESOLVED="Resolved"}(r||(t.AutoFeedbackItemStatus=r={})),t.DefaultGlobalVariable=o,function(e){e.EDITED_RESPONSE_TEXT="__edited_response_text",e.PROMPT_TEXT="__prompt_text",e.CHAT_HISTORY="__chat_history",e.ORIGINAL_RESPONSE_TEXT="__original_response_text"}(o||(t.DefaultGlobalVariable=o={}));t.RESPONSE_INDEX_REGEX=/__responses\[\s*currResponseIndex\s*(?:-\s*(\d+))?\s*\]/g;const a={[s.InteractionStepType.PromptInput]:[o.PROMPT_TEXT,o.CHAT_HISTORY],[s.InteractionStepType.ModelResponseEditor]:[o.EDITED_RESPONSE_TEXT,o.ORIGINAL_RESPONSE_TEXT,o.PROMPT_TEXT,o.CHAT_HISTORY]};t.globalAllowedChatVariablesByStep=a;const l=[s.InteractionStepType.ModelResponseEditor,s.InteractionStepType.PromptInput];t.validAutoFeedbackStepTypes=l;t.OUTPUT_FORMAT_BLOCK="\n\n-----------------------------\nThen, in your response, add an array of strings using double quotations (\"), where each string is a specific issue plus suggested fixes.\nThe array must be JSON parseable. When quoting a sentence or fragment from the provided User Written Response, use single quotes.\nDo not use double quotes for quoting the User Written Response. And MOST IMPORTANTLY do NOT include any backslashes in your response.\n\nFinally, wrap the array in a block surrounded by ```feedback``` markdown.\n\nExample:\n```feedback\n[\"The sentence 'abc' is incoherent.\", \"Change 'toda' to 'today'.\"]\n```\n-----------------------------";t.OUTPUT_SYSTEM_INSTRUCTIONS="-----------------------------\nFollow these instructions exactly for formatting your response:\n\n1. **Create an array of strings** using double quotations (\").\n2. **Each string must identify a specific issue and suggest a fix.**\n3. **The array must be JSON parseable.**\n4. When quoting a sentence or fragment from the User Written Response, **use single quotes ('), NOT double quotes (\").**\n5. **DO NOT include any backslashes () in your response.**\n\n**Example:**\n^*^*^[\"The sentence 'abc' is incoherent.\", \"Change 'toda' to 'today'.\"]^*^*^\n\n**IMPORTANT: DO NOT DO THE FOLLOWING:**\n- Do NOT wrap the array in any other manner.\n- Do NOT include backslashes.\n- Do NOT use double quotes for quoting the User Written Response.\n- Do NOT format the array as a code block.\n\n**BAD Example (DO NOT DO THIS):**\n```python\n[\"The sentence 'abc' is incoherent.\", \"Change 'toda' to 'today'.\"]\n```\n-----------------------------";t.disagreementFeedbackTemplate=(e,t)=>`-----------------------------\n## Issues not to flag (even if you identify the following issues, do not include them in your response):\nAny issues within the Chat History ${t===s.InteractionStepType.ModelResponseEditor?"or Prompt":""},\n${e}`},612182:function(e,t){Object.defineProperty(t,"__esModule",{value:!0})},510478:function(e,t){Object.defineProperty(t,"__esModule",{value:!0})},35557:function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.DeliveryBuilderJobRequestSchema=t.DEFAULT_CHAT_DELIVERY_ATTEMPT_COUNT_LIMIT=t.PRIMITIVE_EXTERNAL_ATTEMPT_FIELDS=t.EXTERNAL_ATTEMPT_FIELDS=void 0;var n,r=i(689510),o=(n=i(298784))&&n.__esModule?n:{default:n};const s=["attemptedBy","attemptedAt","reviewLevel","response","id"];t.EXTERNAL_ATTEMPT_FIELDS=s;const a=o.default.without(s,"response");t.PRIMITIVE_EXTERNAL_ATTEMPT_FIELDS=a;t.DEFAULT_CHAT_DELIVERY_ATTEMPT_COUNT_LIMIT=1;const l=r.z.object({taskIds:r.z.array(r.z.string().length(24)),projectId:r.z.string().length(24),email:r.z.string().email(),requestUserId:r.z.string().length(24),isTest:r.z.boolean().optional()});t.DeliveryBuilderJobRequestSchema=l},674055:function(e,t){Object.defineProperty(t,"__esModule",{value:!0})},572368:function(e,t){var i,n,r,o;Object.defineProperty(t,"__esModule",{value:!0}),t.OVERALL_WORKER_COMMENT_SOURCE_TYPES=t.WorkerCommentType=t.WorkerCommentSourceType=t.WorkerCommentParentType=t.FeedbackResponseType=void 0,t.FeedbackResponseType=i,function(e){e.Accept="accept",e.Dismiss="dismiss"}(i||(t.FeedbackResponseType=i={})),t.WorkerCommentParentType=n,function(e){e.PipelineV3HumanNode="pipelineV3HumanNode",e.TaskAttempt="taskAttempt",e.Task="task"}(n||(t.WorkerCommentParentType=n={})),t.WorkerCommentSourceType=r,function(e){e.Inline="inline",e.Step="step",e.TextCollection="textCollection",e.QualityMeasurement="qualityMeasurement",e.RRS="rrs",e.RewardModel="rewardModel",e.AutoReviewer="autoReviewer"}(r||(t.WorkerCommentSourceType=r={})),t.WorkerCommentType=o,function(e){e.Text="text",e.Rating="rating",e.Category="category"}(o||(t.WorkerCommentType=o={}));const s=[r.TextCollection,r.QualityMeasurement,r.RRS];t.OVERALL_WORKER_COMMENT_SOURCE_TYPES=s},854358:function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var n={},r=_(i(232095));Object.keys(r).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||e in t&&t[e]===r[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return r[e]}}))}));var o=_(i(893383));Object.keys(o).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||e in t&&t[e]===o[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return o[e]}}))}));var s=_(i(441936));Object.keys(s).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||e in t&&t[e]===s[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return s[e]}}))}));var a=_(i(674055));Object.keys(a).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||e in t&&t[e]===a[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return a[e]}}))}));var l=_(i(402168));Object.keys(l).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||e in t&&t[e]===l[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return l[e]}}))}));var c=_(i(510478));Object.keys(c).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||e in t&&t[e]===c[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return c[e]}}))}));var d=_(i(411802));Object.keys(d).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||e in t&&t[e]===d[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return d[e]}}))}));var p=_(i(612182));Object.keys(p).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||e in t&&t[e]===p[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return p[e]}}))}));var u=_(i(341226));Object.keys(u).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||e in t&&t[e]===u[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return u[e]}}))}));var h=_(i(572368));Object.keys(h).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||e in t&&t[e]===h[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return h[e]}}))}));var m=_(i(392228));Object.keys(m).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||e in t&&t[e]===m[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return m[e]}}))}));var f=_(i(400022));Object.keys(f).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||e in t&&t[e]===f[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return f[e]}}))}));var y=_(i(173995));Object.keys(y).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||e in t&&t[e]===y[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return y[e]}}))}));var g=_(i(35557));Object.keys(g).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||e in t&&t[e]===g[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return g[e]}}))}));var T=_(i(445216));Object.keys(T).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||e in t&&t[e]===T[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return T[e]}}))}));var b=_(i(66630));function _(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,i):{};n.get||n.set?Object.defineProperty(t,i,n):t[i]=e[i]}return t.default=e,t}Object.keys(b).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||e in t&&t[e]===b[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return b[e]}}))}))},66630:function(e,t){Object.defineProperty(t,"__esModule",{value:!0})},341226:function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.LinterPresets=t.LinterPreset=t.ChatTaskScriptLinterConfigSchemas=t.ChatTaskLinterToSupportedStepTypes=t.ChatTaskLinters=void 0;var n=i(689510),r=i(232095),o=i(101241),s=i(388703),a=i(971599),l=i(599789);const c=[o.ScriptLinterName.ChatJsonataCustomLinter,o.ScriptLinterName.ChatPreventAnswerBasedOnContributorWt,o.ScriptLinterName.ChatDolphinPromptImage,o.ScriptLinterName.NightingaleCheckCorrectnessClassification,o.ScriptLinterName.ChatJustificationMinWords,o.ScriptLinterName.NightingaleResponseCoherence,o.ScriptLinterName.ChatNightingaleRankingConsistencyLinter,o.ScriptLinterName.ChatNightingaleRatingConsistencyLinter,o.ScriptLinterName.ChatMissingResponseLinter,o.ScriptLinterName.ChatMLSingletonQualityMetricLinter,o.ScriptLinterName.ChatMLPromptResponsePairQualityMetricLinter,o.ScriptLinterName.ChatRegexLinter,o.ScriptLinterName.ChatGPTZeroLinter,o.ScriptLinterName.ChatGPTScaleLinter,o.ScriptLinterName.ChatMinEditDistanceLinter,o.ScriptLinterName.ChatUniqueResponseLinter,o.ScriptLinterName.ChatPromptResponsePairLinter,o.ScriptLinterName.ChatCorrectLanguageLinter,o.ScriptLinterName.ChatTextLengthLinter,o.ScriptLinterName.ChatNGramDiversityLinter,o.ScriptLinterName.ChatBadWordsLinter,o.ScriptLinterName.ChatSemanticSimilarityLinter,o.ScriptLinterName.ChatMultiTurnResponseSimilarityLinter,o.ScriptLinterName.ChatGoogleTranslateDetectionLinter,o.ScriptLinterName.ChatURLExistsLinter,o.ScriptLinterName.ChatPromptResponseWordCountDiffLinter,o.ScriptLinterName.ChatSphereExecutionOutputLinter,o.ScriptLinterName.BeeCustomLinter,o.ScriptLinterName.ChatJustificationLikertMatchMLLinter,o.ScriptLinterName.ChatValidLikertScoreLinter,o.ScriptLinterName.ChatNightingaleCustomizedLinter,o.ScriptLinterName.ChatNightingaleArchetypeDiversityLinter,o.ScriptLinterName.ChatNightingaleGoalAlignmentLinter,o.ScriptLinterName.ChatNightingalePlagiarismLinter,o.ScriptLinterName.ChatNightingaleReferenceLinter,o.ScriptLinterName.ChatNightingaleValidateArchetypeLinter,o.ScriptLinterName.ChatNightingaleWordCountLinter,o.ScriptLinterName.ChatPromptComparisonToSearchResult,o.ScriptLinterName.ChatBulbaFactualityLinter,o.ScriptLinterName.ChatNERSentenceLinter,o.ScriptLinterName.ChatBulbaLikertResponseValidator,o.ScriptLinterName.ChatBulbaLockFieldLinter,o.ScriptLinterName.ChatPromptModelAgreementLinter,o.ScriptLinterName.ChatBulbaCodeEvalCodePresentLinter,o.ScriptLinterName.ChatImageNSFWLinter,o.ScriptLinterName.ChatMRSSphereExecutionRelevanceLinter,o.ScriptLinterName.ChatGoogleSearchPlagiarismLinter,o.ScriptLinterName.ChatMultiModalRelevanceLinter,o.ScriptLinterName.ChatLatexParsingLinter,o.ScriptLinterName.ChatBlockMMMULinter];t.ChatTaskLinters=c;const d={[o.ScriptLinterName.ChatMissingResponseLinter]:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.ModelResponseEditor,r.InteractionStepType.TextCollection,r.InteractionStepType.TextCollectionPerResponse,r.InteractionStepType.NER],[o.ScriptLinterName.ChatMLSingletonQualityMetricLinter]:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.ModelResponseEditor,r.InteractionStepType.TextCollection],[o.ScriptLinterName.ChatMLPromptResponsePairQualityMetricLinter]:[r.InteractionStepType.ModelResponseEditor],[o.ScriptLinterName.ChatRegexLinter]:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.ModelResponseEditor,r.InteractionStepType.ModelResponseSelector,r.InteractionStepType.TextCollection,r.InteractionStepType.TextCollectionPerResponse],[o.ScriptLinterName.ChatGPTZeroLinter]:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.ModelResponseEditor,r.InteractionStepType.TextCollection],[o.ScriptLinterName.ChatGPTScaleLinter]:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.ModelResponseEditor,r.InteractionStepType.TextCollection,r.InteractionStepType.ModelResponseSelector],[o.ScriptLinterName.ChatMinEditDistanceLinter]:[r.InteractionStepType.ModelResponseEditor],[o.ScriptLinterName.ChatUniqueResponseLinter]:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.ModelResponseEditor,r.InteractionStepType.TextCollection],[o.ScriptLinterName.ChatPromptResponsePairLinter]:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.ModelResponseEditor,r.InteractionStepType.TextCollection,r.InteractionStepType.ProcessSupervision,r.InteractionStepType.ExperimentalToolUse,r.InteractionStepType.TextCollectionPerResponse,r.InteractionStepType.ModelResponseSelector],[o.ScriptLinterName.ChatCorrectLanguageLinter]:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.ModelResponseEditor,r.InteractionStepType.TextCollection],[o.ScriptLinterName.ChatTextLengthLinter]:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.ModelResponseEditor,r.InteractionStepType.ModelResponseSelector,r.InteractionStepType.TextCollection,r.InteractionStepType.ProcessSupervision,r.InteractionStepType.TextCollectionPerResponse],[o.ScriptLinterName.ChatNGramDiversityLinter]:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.ModelResponseEditor,r.InteractionStepType.ModelResponseSelector,r.InteractionStepType.TextCollection],[o.ScriptLinterName.ChatBadWordsLinter]:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.ModelResponseEditor,r.InteractionStepType.ModelResponseSelector,r.InteractionStepType.TextCollection,r.InteractionStepType.TextCollectionPerResponse],[o.ScriptLinterName.ChatSemanticSimilarityLinter]:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.ModelResponseEditor,r.InteractionStepType.TextCollection],[o.ScriptLinterName.ChatGoogleTranslateDetectionLinter]:[r.InteractionStepType.ModelResponseEditor],[o.ScriptLinterName.ChatMultiTurnResponseSimilarityLinter]:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.ModelResponseEditor],[o.ScriptLinterName.ChatURLExistsLinter]:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.TextCollection,r.InteractionStepType.TextCollectionPerResponse],[o.ScriptLinterName.ChatPromptResponseWordCountDiffLinter]:[r.InteractionStepType.ModelResponseEditor],[o.ScriptLinterName.ChatSphereExecutionOutputLinter]:[r.InteractionStepType.TextCollection,r.InteractionStepType.ModelResponseEditor],[o.ScriptLinterName.BeeCustomLinter]:[r.InteractionStepType.ModelResponseEditor,r.InteractionStepType.TextCollection],[o.ScriptLinterName.ChatValidLikertScoreLinter]:[r.InteractionStepType.TextCollection],[o.ScriptLinterName.ChatJustificationLikertMatchMLLinter]:[r.InteractionStepType.ModelResponseSelector],[o.ScriptLinterName.ChatNightingaleCustomizedLinter]:[r.InteractionStepType.TextCollection],[o.ScriptLinterName.ChatNightingaleArchetypeDiversityLinter]:[r.InteractionStepType.TextCollection],[o.ScriptLinterName.ChatNightingaleGoalAlignmentLinter]:[r.InteractionStepType.PromptInput,r.InteractionStepType.ModelResponseEditor,r.InteractionStepType.MultiTurnContinue],[o.ScriptLinterName.ChatNightingalePlagiarismLinter]:[r.InteractionStepType.ModelResponseEditor],[o.ScriptLinterName.ChatNightingaleReferenceLinter]:[r.InteractionStepType.ModelResponseEditor],[o.ScriptLinterName.ChatNightingaleValidateArchetypeLinter]:[r.InteractionStepType.TextCollection],[o.ScriptLinterName.ChatNightingaleWordCountLinter]:[r.InteractionStepType.ModelResponseEditor,r.InteractionStepType.TextCollection],[o.ScriptLinterName.ChatPromptComparisonToSearchResult]:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue],[o.ScriptLinterName.ChatBulbaFactualityLinter]:[r.InteractionStepType.TextCollection],[o.ScriptLinterName.ChatNERSentenceLinter]:[r.InteractionStepType.NER],[o.ScriptLinterName.ChatBulbaLikertResponseValidator]:[r.InteractionStepType.TextCollection],[o.ScriptLinterName.ChatJsonataCustomLinter]:[r.InteractionStepType.ModelResponseEditor,r.InteractionStepType.ModelResponseSelector,r.InteractionStepType.TextCollection,r.InteractionStepType.TextCollectionPerResponse,r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.QualityMeasurement,r.InteractionStepType.ProcessSupervision],[o.ScriptLinterName.ChatPreventAnswerBasedOnContributorWt]:[r.InteractionStepType.TextCollection],[o.ScriptLinterName.ChatDolphinPromptImage]:[r.InteractionStepType.TextCollection],[o.ScriptLinterName.NightingaleCheckCorrectnessClassification]:[r.InteractionStepType.TextCollectionPerResponse],[o.ScriptLinterName.ChatJustificationMinWords]:[r.InteractionStepType.ModelResponseSelector],[o.ScriptLinterName.NightingaleResponseCoherence]:[r.InteractionStepType.TextCollectionPerResponse,r.InteractionStepType.ModelResponseSelector],[o.ScriptLinterName.ChatNightingaleRatingConsistencyLinter]:[r.InteractionStepType.TextCollectionPerResponse],[o.ScriptLinterName.ChatNightingaleRankingConsistencyLinter]:[r.InteractionStepType.ModelResponseSelector],[o.ScriptLinterName.ChatBulbaLockFieldLinter]:[r.InteractionStepType.TextCollection],[o.ScriptLinterName.ChatPromptModelAgreementLinter]:[r.InteractionStepType.PromptInput],[o.ScriptLinterName.ChatBulbaCodeEvalCodePresentLinter]:[r.InteractionStepType.TextCollectionPerResponse],[o.ScriptLinterName.ChatImageNSFWLinter]:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.TextCollection],[o.ScriptLinterName.ChatMRSSphereExecutionRelevanceLinter]:[r.InteractionStepType.TextCollectionPerResponse,r.InteractionStepType.TextCollection],[o.ScriptLinterName.ChatGoogleSearchPlagiarismLinter]:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.ModelResponseEditor],[o.ScriptLinterName.ChatMultiModalRelevanceLinter]:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.ModelResponseEditor],[o.ScriptLinterName.ChatLatexParsingLinter]:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.ModelResponseEditor],[o.ScriptLinterName.ChatBlockMMMULinter]:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue]};var p;t.ChatTaskLinterToSupportedStepTypes=d,function(e){e.LessThan="lt",e.GreaterThanOrEqualTo="gte"}(p||(p={}));const u={[o.ScriptLinterName.ChatJsonataCustomLinter]:n.z.object({expressions:n.z.array(n.z.string()).describe("JSONata expressions to be evaluated against full linter context object. Please remember each expression should return an explicit true or false, value otherwise this linter will not work as intended. Linter will fire if the end result is true."),operator:n.z.nativeEnum(o.RegexMatches).describe("Specify 'every' if all expressions must match; Specify 'some' if any expression must match; Specify 'none' if no expressions must match."),messageExpression:n.z.string().describe("JSONata expression to be evaluated to create a personal linter message").optional(),debugMode:n.z.boolean().describe("ENG Only - Enable when you need to debug the linter via datadog logs").optional()}),[o.ScriptLinterName.ChatPreventAnswerBasedOnContributorWt]:n.z.object({workerTeamsToInclude:n.z.array(n.z.string()).describe("List of worker teams whose contributors should be answering a specific field"),workerTeamsToExclude:n.z.array(n.z.string()).describe("List of worker teams whose contributors should not be answering a specific field"),fieldId:n.z.string().describe("Specify the fieldId to check")}),[o.ScriptLinterName.ChatDolphinPromptImage]:n.z.object({}),[o.ScriptLinterName.NightingaleCheckCorrectnessClassification]:n.z.object({}),[o.ScriptLinterName.ChatJustificationMinWords]:n.z.object({minCharacterLength:n.z.number().describe("The minimum number of characters required in the response justification.").optional(),maxCharacterLength:n.z.number().describe("The maximum number of characters required in the response justification.").optional(),minWordCount:n.z.number().describe("The minimum number of words required in the response justification").optional(),maxWordCount:n.z.number().describe("The maximum number of words required in the response justification.").optional()}),[o.ScriptLinterName.NightingaleResponseCoherence]:n.z.object({checkCompleteRange:n.z.boolean()}),[o.ScriptLinterName.ChatNightingaleRankingConsistencyLinter]:n.z.object({}),[o.ScriptLinterName.ChatNightingaleRatingConsistencyLinter]:n.z.object({}),[o.ScriptLinterName.ChatMissingResponseLinter]:n.z.object({}),[o.ScriptLinterName.ChatMLSingletonQualityMetricLinter]:n.z.object({qualityMetricType:n.z.nativeEnum(s.SingletonQualityMetricType),lowerBoundScore:n.z.number().gte(0).lte(1),thresholdScore:n.z.number().gte(0).lte(1).describe("The threshold score for the linter to flag an error."),fieldId:n.z.string().describe("Specify the fieldId if the rule is intended to be applied to any textcollection steps.").optional()}),[o.ScriptLinterName.ChatMLPromptResponsePairQualityMetricLinter]:n.z.object({qualityMetricType:n.z.nativeEnum(s.PromptResponsePairQualityMetricType),lowerBoundScore:n.z.number().gte(0).lte(1),thresholdScore:n.z.number().gte(0).lte(1).describe("The threshold score for the linter to flag an error."),fieldId:n.z.string().describe("Specify the fieldId if the rule is intended to be applied to any textcollection steps.").optional()}),[o.ScriptLinterName.ChatRegexLinter]:n.z.object({rules:n.z.array(n.z.string()).describe("Regex expressions to match. You can use this [tool](https://regex101.com/) to test (using ECMAScript flavor)."),matches:n.z.nativeEnum(o.RegexMatches).describe("Specify 'every' if all rules must match; Specify 'any' if any rule must match; Specify 'none' if no rules must match."),regexFlags:n.z.string().describe("Learn more about flags [here](https://javascript.info/regexp-introduction#flags)").optional(),exceptions:n.z.array(n.z.string()).describe("Regex expressions to exclude from the match of rules.").optional(),fieldId:n.z.string().describe("Specify the fieldId if the rule is intended to be applied to any textcollection steps.").optional()}),[o.ScriptLinterName.ChatGPTZeroLinter]:n.z.object({average_generated_prob:n.z.number().min(0).max(1).optional(),completely_generated_prob:n.z.number().min(0).max(1).optional(),overall_burstiness:n.z.number().optional(),minTokensToApply:n.z.number().optional(),fieldId:n.z.string().describe("Specify the fieldId if the rule is intended to be applied to any textcollection steps.").optional()}),[o.ScriptLinterName.ChatGPTScaleLinter]:n.z.object({probability:n.z.number().min(0).max(1).optional(),characterMinimum:n.z.number().min(0).optional(),runOnJustification:n.z.boolean().describe("Turn on this option if you want to run the linter on the model response selector's justification text.").optional(),fieldId:n.z.string().describe("Specify the fieldId if the rule is intended to be applied to any textcollection steps.").optional()}),[o.ScriptLinterName.ChatMinEditDistanceLinter]:n.z.object({minRelativeLevenshteinDistance:n.z.number().gte(0).lte(1).describe('Flags if the distance of the current text v.s. the initial text is less than "minRelativeLevenshteinDistance".'),minLengthToApply:n.z.number().describe("If the response length is less than this value, the lint rule will not apply.").optional(),minWordsToApply:n.z.number().describe("If the text has less words than the threshold the linter won't flag anything.").optional(),ignoreMarkdownForDistanceCalculation:n.z.boolean().describe("If true, strip markdown formatting before checking distance").optional()}),[o.ScriptLinterName.ChatUniqueResponseLinter]:n.z.object({minLengthToApply:n.z.number().describe("If the response length is less than this value, the lint rule will not apply.").optional(),minRelativeLevenshteinDistance:n.z.number().describe("The lint rule will be triggered if the Levenshtein distance between any of the previous response texts and the current response is less than the specified value.").optional(),compareDifferentAttempters:n.z.boolean().describe("Whether or not to consider responses from other taskers").optional(),attemptsLimit:n.z.number().describe("Number of attempts to look back. Default: 500").optional(),addPrevAttemptsToMessage:n.z.boolean().describe("Whether to show the previously submitted text in the linter message.").optional(),fieldId:n.z.string().describe("TextCollection field Id.").optional(),reviewLevels:n.z.array(n.z.nativeEnum(l.ReviewLevel)).describe("The review levels to filter the historically submitted attempts by.").optional(),windowDays:n.z.number().describe("# days to look back. Default: 21").optional(),useLevenshtein:n.z.boolean().describe("Default: true. If set to false, the texts are compared by exact match.").optional()}),[o.ScriptLinterName.ChatPromptResponsePairLinter]:n.z.object({promptTemplate:n.z.string().describe("Reference the response as {{responseText}} and prompt as {{promptText}}. For TextCollection steps, reference the field_id in double brackets {{}}, such as {{ranking_reasoning}}."),systemPrompt:n.z.string().describe('System prompt helps set the behavior of GPT (e.g., "You are a helpful assistant.") and can typically be left blank. See the [OpenAI docs](https://platform.openai.com/docs/guides/gpt/chat-completions-api)').optional(),overriddenModelParams:n.z.object({model:n.z.string(),max_tokens:n.z.number(),temperature:n.z.number(),tools:n.z.array(n.z.string()).optional()}).describe("If the prompt works on gpt-3.5-turbo, we'd suggest using gpt-3.5-turbo. If it does not work, use gpt-4.").optional(),passIfNumericOutputMatches:n.z.object({comparator:n.z.nativeEnum(p),threshold:n.z.number()}).describe("Used in combination with the threshold to determine whether the response passes or fails").optional(),passIfStringOutputMatches:n.z.object({regexMatch:n.z.string(),flags:n.z.string().optional()}).describe("If the GPT output matches this regular expression, the response will pass. Use a [regex tester](https://regex101.com/) to test your regex.").optional(),showModelOutput:n.z.boolean().describe("Toggle on if you want to show the GPT model output to taskers. Please first test the linter to validate if the GPT output will be helpful to taskers.").optional(),modelOutputRegexMatch:n.z.string().describe("If you only want to output part of the GPT output, input the regex to use for extracting the output. Use a [regex tester](https://regex101.com/) to test your regex.").optional(),fieldId:n.z.string().describe("If running over any TextCollection steps, specify the fieldId in the TextCollection step to apply to.").optional(),minTurnNumber:n.z.number().describe("The minimum number of turns this linter should apply to.").optional(),maxTurnNumber:n.z.number().describe("The maximum number of turns this linter should apply to.").optional()}),[o.ScriptLinterName.ChatTextLengthLinter]:n.z.object({runOnReferenceTextContent:n.z.boolean().describe("If selected, the linter will run on the reference text content and NOT on associated step. (Applies only for Prompt Input & Multi turn continue steps)").optional(),minCharacterLength:n.z.number().describe("The minimum number of characters required in the prompt/response.").optional(),maxCharacterLength:n.z.number().describe("The maximum number of characters required in the prompt/response.").optional(),minWordCount:n.z.number().describe("The minimum number of words required in the prompt/response.").optional(),maxWordCount:n.z.number().describe("The maximum number of words required in the prompt/response.").optional(),fieldId:n.z.string().describe("Specify the fieldId if the rule is intended to be applied to any textcollection steps.").optional(),variableRules:n.z.array(n.z.object({variableName:n.z.string(),variableValue:n.z.string().describe("Supports Regex statements"),caseSensitive:n.z.boolean().optional()}).describe('When defined, linter will only be applied for the tasks with the entered variable name and value pairs. i.e. variableName: "category", variableValue: "complex" will only apply the linter to the tasks with task.params.templateVariables.category = "complex"')).optional()}),[o.ScriptLinterName.ChatCorrectLanguageLinter]:n.z.object({language:n.z.string(),minCharsToApply:n.z.number().optional(),minTokensToApply:n.z.number().optional(),confidence:n.z.number().optional(),fieldId:n.z.string().optional()}),[o.ScriptLinterName.ChatNGramDiversityLinter]:n.z.object({maxMatches:n.z.number().describe('If there are more than "maxMatches" ngram tokens from the previous submitted text, the linter would flag an error.'),numAttempts:n.z.number().describe("Number of previous submitted task attempts to look back."),n:n.z.number().describe('The "n" of n-gram. Learn more about how it works here (https://en.wikipedia.org/wiki/N-gram)'),ignoreStopWords:n.z.boolean().describe("If this is enabled, stop words will not be considered for n-gram blocking. For example, if you have Ignore Stop Words enabled, for a sentence like 'the dog jumped over the cat', the 2-grams returned would be [ 'dog jumped', 'jumped over', 'over cat' ]. If Ignore Stop Words was disabled, the 2-grams would be [ 'dog jumped', 'jumped over', 'over the', 'the cat' ].").optional(),additionalStopWords:n.z.array(n.z.string()).describe("Additional stop words to be added in addition to the default list here (https://dashboard.scale.com/corp/rapid/stop-words).").optional(),fieldId:n.z.string().describe("Specify the fieldId if the rule is intended to be applied to any textcollection steps.").optional(),wordList:n.z.array(n.z.string()).describe('If this is populated, the n-gram linter will only consider words in this list, instead of all n-grams. The words in this list must match the N of the n-gram to be considered (e.g., if you have a 2-gram, and put down "dog", "fluffy dog" would not be counted, and taskers could use the word "fluffy dog" as much as they wanted). Typically this is used to block a targeted list of phrases from showing up too frequently. For example, by setting n = 2, and putting down "write a", you can block taskers from writing "write a" too frequently.').optional(),ignoreCodeBlocks:n.z.boolean().describe("If checked, the linter will ignore the code block present in the field id provided").optional()}),[o.ScriptLinterName.ChatBadWordsLinter]:n.z.object({flagProfanity:n.z.boolean().describe("Default true. If false (unchecked), ignores the default list and only the flaggedWords list will be considered profanity to be linted against.").optional(),flaggedWords:n.z.array(n.z.string()).describe('The linter contains a default list of banned words hardcoded in the codebase. Use ""flaggedWords"" to include more words to be banned.').optional(),wordBreak:n.z.boolean().describe("Set to true by default, and what it means is that only the exact words matched in the bad word list will be flagged. A random word including consecutive characters that form a bad word won't be flagged.").optional(),exceptions:n.z.array(n.z.string()).describe("Whitelist words").optional(),fieldId:n.z.string().describe("Specify the fieldId if the rule is intended to be applied to any textcollection steps.").optional()}),[o.ScriptLinterName.ChatSemanticSimilarityLinter]:n.z.object({thresholds:n.z.array(n.z.object({threshold:n.z.number().describe("The minimum threshold for the linter to flag a prompt towards the similarity count."),maxPromptsAboveThreshold:n.z.number().describe("The maximum number of prompts that can be above the threshold. If the number of prompts above the threshold exceeds this value, the linter will flag an error.")}).describe("The maximum number of prompts that can be above the given threshold. If the number of prompts above the threshold exceeds this value, the linter will flag an error.")),fieldId:n.z.string().describe("Specify the fieldId if the rule is intended to be applied to any textcollection steps.").optional()}),[o.ScriptLinterName.ChatGoogleTranslateDetectionLinter]:n.z.object({minWordsToApply:n.z.number().describe("If the text has less words than the threshold the linter won't flag anything.").optional(),minRelativeLevenshteinDistance:n.z.number(),fromLanguage:n.z.string().describe("Check support languages [here](https://cloud.google.com/translate/docs/languages)"),toLanguage:n.z.string().describe("Check support languages [here](https://cloud.google.com/translate/docs/languages)")}),[o.ScriptLinterName.ChatMultiTurnResponseSimilarityLinter]:n.z.object({minWordsToApply:n.z.number().describe("If the text has less words than the threshold the linter won't flag anything.").optional(),minRelativeLevenshteinDistance:n.z.number().describe('Flags if the distance of the current text v.s. the previously submitted text is less than "minRelativeLevenshteinDistance".')}),[o.ScriptLinterName.ChatURLExistsLinter]:n.z.object({liveCheck:n.z.boolean().describe("Whether to ping the URL and verify the URL is healthy.").optional(),fieldId:n.z.string().describe("The text collection field id.").optional(),checkFirstTurn:n.z.boolean().describe("Whether to only check the first prompt and not subsequent turns").optional(),blackListDomainsFileUrl:n.z.string().describe("A public file URL where file contains a list of domains in each line").optional()}),[o.ScriptLinterName.ChatPromptResponseWordCountDiffLinter]:n.z.object({minWordsToApply:n.z.number().describe("If the text has less words than the threshold the linter won't flag anything.").optional(),maxWordsCountMultiplier:n.z.number().min(1),minWordsCountMultiplier:n.z.number().min(0).max(1)}),[o.ScriptLinterName.ChatValidLikertScoreLinter]:n.z.object({fieldId:n.z.string().describe('The field id for field containing the Likert score (e.g. "response_ranking").')}).optional(),[o.ScriptLinterName.ChatJustificationLikertMatchMLLinter]:n.z.object({majorityThreshold:n.z.number().describe("The threshold for the majority of the Likert scores to match the ML model output.").optional(),useMagnitude:n.z.boolean().describe("If checked, the linter will check if the magnitude of the Likert scores matches the ML model output. If not, it will just use the direction.").optional()}),[o.ScriptLinterName.ChatSphereExecutionOutputLinter]:n.z.object({codeFieldId:n.z.string().describe("The field id for field containing the code to run. This is REQUIRED."),concatCodeFieldIds:n.z.array(n.z.string()).describe("The field ids for other fields containing code to run. This is useful if you want to run multiple code snippets together that will be concatenated together. This is OPTIONAL.").optional(),testCodeFieldId:n.z.string().describe("The field id for field containing test cases that run in a separate file. This is OPTIONAL.").optional(),outputFieldId:n.z.string().describe("The field id for field containing the code output. If this isn't provided, the linter just checks if the code runs.").optional(),sphereProjectId:n.z.string().describe("The sphere project to run the code in. If this and the language are not specified, the sphere project id is pulled dynamically from the sphere engine workspace field.").optional(),language:n.z.nativeEnum(o.AcceptedSphereLanguage).describe("If no sphere project id is specified, then a sphere project of the given language is\n        used. Likewise, if no sphereProjectCodeFilePath is provided, then the default file for\n        the given language is used. It is recommended to specify the sphere project instead of\n        going down this route to ensure the needed imports are present and the environment set\n        up is correct. This all implies that if you want to use a custom sphere project, you must\n        clear the language field.").optional(),scenarioName:n.z.string().describe("Defaults to 'run'. Only add a value to this field if you understand scenarios in sphere engine.").optional(),sphereProjectCodeFilePath:n.z.string().describe("The file path to the code file to run. If not provided, the default file for the given language is used.").optional(),sphereProjectTestFilePath:n.z.string().describe("The file path to the test file to run. If not provided, the default test file for the given language is used.\n          This file is only relevant if you provide a testCodeFieldId.").optional(),postprocessMarkdown:n.z.boolean().describe("If checked, this will remove triple backticks and the language from the code and test text fields before\n        running the linter.").optional()}),[o.ScriptLinterName.BeeCustomLinter]:n.z.object({lintForPromptCategorization:n.z.boolean().describe("lintForPromptCategorization is true, linter will execute lint on Prompt Categorization field").optional()}),[o.ScriptLinterName.ChatNightingaleCustomizedLinter]:n.z.object({userStepTemplate:n.z.string().optional(),agentStepTemplate:n.z.string().optional()}),[o.ScriptLinterName.ChatNightingaleArchetypeDiversityLinter]:n.z.object({minPercentFollowUps:n.z.number(),maxNormalQuestions:n.z.number(),maxStatementQuestions:n.z.number(),maxQuestionsWithContextStatements:n.z.number(),maxClarifications:n.z.number()}),[o.ScriptLinterName.ChatNightingaleGoalAlignmentLinter]:n.z.object({promptAlignmentTemplate:n.z.string(),dialogueAlignmentTemplate:n.z.string()}),[o.ScriptLinterName.ChatNightingalePlagiarismLinter]:n.z.object({nGram:n.z.number(),maxAllowedRepetition:n.z.number()}),[o.ScriptLinterName.ChatNightingaleReferenceLinter]:n.z.object({referenceTemplate:n.z.string()}),[o.ScriptLinterName.ChatNightingaleValidateArchetypeLinter]:n.z.object({}),[o.ScriptLinterName.ChatNightingaleWordCountLinter]:n.z.object({}),[o.ScriptLinterName.ChatPromptComparisonToSearchResult]:n.z.object({useGPT:n.z.boolean(),useLevenshtein:n.z.boolean(),threshold:n.z.number()}),[o.ScriptLinterName.ChatBulbaFactualityLinter]:n.z.object({}),[o.ScriptLinterName.ChatNERSentenceLinter]:n.z.object({sentenceDelimiters:n.z.array(n.z.string()).describe('Please enter any characters that you would like to treat as delimiters of a sentence. Use "\n" for new line.'),stopLintingAfterLabel:n.z.string().describe('Use if the linter should only fire on the content leading up to and including a specific label (e.g. stop linting after an "inaccurate" label is used). Enter the label name here if applicable.').optional()}),[o.ScriptLinterName.ChatBulbaLikertResponseValidator]:n.z.object({}),[o.ScriptLinterName.ChatBulbaLockFieldLinter]:n.z.object({stepId:n.z.string().describe("If this step ID is visible, the given field will be locked"),fieldId:n.z.string().describe("The field ID to lock")}),[o.ScriptLinterName.ChatPromptModelAgreementLinter]:n.z.object({strategyName:n.z.string().optional(),modelParams:n.z.object({model:n.z.string().optional()}).optional(),passIfAgree:n.z.boolean().optional()}),[o.ScriptLinterName.ChatBulbaCodeEvalCodePresentLinter]:n.z.object({}),[o.ScriptLinterName.ChatImageNSFWLinter]:n.z.object({thresholds:n.z.object({animal_violence:n.z.number().min(0).max(1),blood_and_gore:n.z.number().min(0).max(1),child_present:n.z.number().min(0).max(1),cigarettes_and_tobacco_products:n.z.number().min(0).max(1),explosions:n.z.number().min(0).max(1),exposed_breasts:n.z.number().min(0).max(1),exposed_butts:n.z.number().min(0).max(1),genitalia:n.z.number().min(0).max(1),guns:n.z.number().min(0).max(1),harassment_and_hate_speech:n.z.number().min(0).max(1),knives:n.z.number().min(0).max(1),marijuana:n.z.number().min(0).max(1),other_drugs:n.z.number().min(0).max(1),other_weapons:n.z.number().min(0).max(1),physical_violence:n.z.number().min(0).max(1),sex_toys:n.z.number().min(0).max(1),sexual_activity:n.z.number().min(0).max(1),suggestive:n.z.number().min(0).max(1),is_sensitive:n.z.number().min(0).max(1)}).describe("Indicate a minimum probability threshold on each risk criteria above which an image will be flagged as unsafe."),fieldId:n.z.string().describe("Specify the fieldId if the rule is intended to be applied to any textcollection steps.").optional()}),[o.ScriptLinterName.ChatMRSSphereExecutionRelevanceLinter]:n.z.object({promptTemplate:n.z.string().describe("Reference the executed code as {{executedCode}} and the model output as {{modelOutput}}. For TextCollection steps, reference the field_id in double brackets {{}}, such as {{ranking_reasoning}}."),systemPrompt:n.z.string().describe('System prompt helps set the behavior of GPT (e.g., "You are a helpful assistant.") and can typically be left blank. See the [OpenAI docs](https://platform.openai.com/docs/guides/gpt/chat-completions-api)').optional(),overriddenModelParams:n.z.object({model:n.z.string(),max_tokens:n.z.number(),temperature:n.z.number()}).describe("If the prompt works on gpt-3.5-turbo, we'd suggest using gpt-3.5-turbo. If it does not work, use gpt-4.").optional()}),[o.ScriptLinterName.ChatGoogleSearchPlagiarismLinter]:n.z.object({useGPT:n.z.boolean().describe("Use GPT-4 to compare the sentence against the search results"),useLevenshtein:n.z.boolean().describe("Use Levenshtein distance to compare the sentence against the search results"),sentenceMatchThreshold:n.z.number().describe("The threshold for the similarity score between the sentence and the search results (either GPT-4 confidence score or Levenshtein distance)"),allowedSentenceMatches:n.z.number().describe("The number of sentences that can match with the search results before the response is flagged for plagiarism"),searchResultsToCompare:n.z.number().describe("The number of search results to compare against each sentence")}),[o.ScriptLinterName.ChatMultiModalRelevanceLinter]:n.z.object({}),[o.ScriptLinterName.ChatLatexParsingLinter]:n.z.object({}),[o.ScriptLinterName.ChatBlockMMMULinter]:n.z.object({similarityThreshold:n.z.number().describe("The threshold for the similarity score between the image and MMMU images")})};t.ChatTaskScriptLinterConfigSchemas=u;const h={stage:o.LintStage.Frontend,frontendSeverity:a.LintSeverity.WARNING,level:o.LintLevel.Info,enableAttempt:!0,enableL0:!0,enableL1:!0,enableL4:!0,enableL8:!1,enableL10:!0,enableL11:!1,enableL12:!1,enableBenchmarks:!0,enableQIRAuditor:!1,enableQIRLeadAuditor:!1,enableCustomerAudit:!1,levelAfterMaxFailures:o.LintLevel.Info,enableLintAutofix:!1,lintPanelOrder:0,dismissalReasons:[],runPerTurn:!1,isOffline:!0};var m;t.LinterPreset=m,function(e){e.ChatJsonataCustomLinter="[needs configuration] chat-jsonata-custom-linter",e.ChatPreventAnswerBasedOnContributorWt="[needs configuration] chat-prevent-answer-based-on-contributor-wt",e.ChatDolphinPromptImage="[out-of-the-box] chat-dolphin-prompt-image",e.NightingaleCheckCorrectnessClassification="[out-of-the-box] nightingale-check-correctness-classification",e.ChatJustificationMinWords="[needs configuration] chat-justification-min-words",e.NightingaleResponseCoherence="[out-of-the-box] nightingale-response-coherence",e.GrammarCheckerPrompt="[out-of-the-box] grammar-checker-prompt (prp)",e.GrammarCheckerResponse="[out-of-the-box] grammar-checker-response (prp)",e.JustificationAndSelectionMatch="[out-of-the-box] justification-and-selection-match",e.BadWords="[out-of-the-box] bad-words",e.MissingResponse="[out-of-the-box] missing-response",e.UniqueResponse="[out-of-the-box] unique-response",e.AIContentDetector="[out-of-the-box] ai-content-detector",e.AIContentDetectorScale="[out-of-the-box] ai-content-detector (scale classifiers)",e.MinResponseEditDistance="[out-of-the-box] min-response-edit-distance",e.NGramDiversity="[out-of-the-box] ngram-diversity",e.SpamWords="[out-of-the-box] spam-words",e.SemanticSimilarity="[out-of-the-box] semantic-similarity",e.MultiTurnResponseSimilarity="[out-of-the-box] multi-turn-response-similarity",e.ChatValidLikertScore="[out-of-the-box] chat-valid-likert-score",e.Regex="[needs configuration] regex",e.URLExists="[needs configuration] url-exists",e.GoogleTranslateDetector="[needs configuration] google-translate-detector",e.TextLength="[needs configuration] text-length",e.MLQualitySingletonMetric="[needs configuration] ml-quality-singleton-metric",e.MLQualityPRPMetric="[needs configuration] ml-quality-prp-metric",e.PromptResponsePairNumerical="[needs configuration] prompt-response-pair-numerical",e.PromptResponsePairString="[needs configuration] prompt-response-pair-string",e.PromptResponseWordCountDiff="[needs configuration] prompt-response-word-count-diff",e.SphereExecutionOutputLinter="[needs configuration] sphere-execution-output-linter",e.ChatNightingaleCustomizedLinter="[out-of-the-box] Nightingale Customized Linter",e.ChatNightingaleArchetypeDiversityLinter="[out-of-the-box] nightingale-archetype-diversity-linter",e.ChatNightingaleGoalAlignmentLinter="[out-of-the-box] nightingale-goal-alignment-linter",e.ChatNightingalePlagiarismLinter="[out-of-the-box] nightingale-plagiarism-linter",e.ChatNightingaleReferenceLinter="[out-of-the-box] nightingale-reference-linter",e.ChatNightingaleValidateArchetypeLinter="[out-of-the-box] nightingale-validate-archetype-linter",e.ChatNightingaleWordCountLinter="[out-of-the-box] nightingale-word-count-linter",e.ChatNightingaleRankingConsistencyLinter="[out-of-the-box] chat-nightingale-ranking-consistency-linter",e.ChatNightingaleRatingConsistencyLinter="[out-of-the-box] chat-nightingale-rating-consistency-linter",e.ChatJustificationLikertMatchMLLinter="[out-of-the-box] chat-justification-and-likert-ml-match",e.ChatPromptComparisonToSearchResult="prompt-comparison-to-search-result",e.ChatBulbaFactualityLinter="[out-of-the-box] bulba-factuality-linter",e.ChatBulbaLikertResponseValidator="[Bulba MT] Likert_response_bad_validator",e.ChatBulbaLockFieldLinter="[Bulba MT] Lock_field_linter",e.ChatBulbaCodeEvalCodePresentLinter="[Bulba Code Eval] Code Present Linter",e.ChatMRSSphereExecutionRelevanceLinter="[Bulba Code Eval] Sphere Execution Relevance Linter",e.ChatNERSentenceLinter="[out-of-the-box] ner-sentence-linter",e.ChatPromptModelAgreementLinter="[needs configuration] prompt-model-agreement-linter",e.ChatImageNSFWLinter="[needs-configuration] image-nsfw-linter",e.ChatGoogleSearchPlagiarismLinter="[needs-configuration] google-search-plagiarism-linter",e.ChatMultiModalRelevanceLinter="[out-of-the-box] mm-relevance-linter",e.ChatLatexParsingLinter="[out-of-the-box] latex-parsing-linter",e.ChatBlockMMMULinter="[out-of-the-box] block-mmmu-linter"}(m||(t.LinterPreset=m={}));const f={[m.ChatJsonataCustomLinter]:{...h,name:"JSONata Linter - Can be used to build custom project linters",shortDescription:"Evaluates JSONata expressions and flags the linter if given expressions are ends up being false.",longDescription:"JSONata has an editor: https://try.jsonata.org/ that helps you to test your linter. Each expression evaluated separately.\n'Every': Checkes if all expressions are true | 'Some': Checks if at least one expression is true | 'None': Checks if none of the expressions are true\nThen if the final result is false, then the linter will be flagged.\nAn example: https://try.jsonata.org/Dh9P_r0PK",condition:{scriptName:o.ScriptLinterName.ChatJsonataCustomLinter,config:{runOnStepTypes:[r.InteractionStepType.TextCollection,r.InteractionStepType.TextCollectionPerResponse,r.InteractionStepType.PromptInput,r.InteractionStepType.ModelResponseEditor,r.InteractionStepType.ModelResponseSelector]}},message:"Please make sure your answers follow the instructions correctly"},[m.ChatPreventAnswerBasedOnContributorWt]:{...h,name:"Prevent Field Response By WT",condition:{scriptName:o.ScriptLinterName.ChatPreventAnswerBasedOnContributorWt,config:{runOnStepTypes:[r.InteractionStepType.TextCollection]}},message:"Ensures specific contributors answer field"},[m.ChatDolphinPromptImage]:{...h,name:"Dolphin Prompt Image Accuracy",condition:{scriptName:o.ScriptLinterName.ChatDolphinPromptImage,config:{runOnStepTypes:[r.InteractionStepType.TextCollection]}},message:"Prompt + image pair ratings"},[m.NightingaleCheckCorrectnessClassification]:{...h,name:"Nightingale Check Correctness Classification",condition:{scriptName:o.ScriptLinterName.NightingaleCheckCorrectnessClassification,config:{runOnStepTypes:[r.InteractionStepType.TextCollectionPerResponse]}},message:"Please make sure the correctness rating is in line with the response classification"},[m.ChatJustificationMinWords]:{...h,name:"Min Length/Words in Justification",condition:{scriptName:o.ScriptLinterName.ChatJustificationMinWords,config:{runOnStepTypes:[r.InteractionStepType.ModelResponseSelector]}},message:"Please make sure the justification meets the requirements"},[m.NightingaleResponseCoherence]:{...h,name:"Nightingale Check Response Coherence",condition:{scriptName:o.ScriptLinterName.NightingaleResponseCoherence,config:{runOnStepTypes:[r.InteractionStepType.TextCollectionPerResponse,r.InteractionStepType.ModelResponseSelector],checkCompleteRange:!0}},message:"Please make sure response ratings are coherent between each other"},[m.ChatPromptModelAgreementLinter]:{...h,name:"Model Agreement Linter (Difficulty)",condition:{scriptName:o.ScriptLinterName.ChatPromptModelAgreementLinter,config:{runOnStepTypes:[r.InteractionStepType.PromptInput],strategyName:"BulbaBridgeStrategy",modelParams:{model:"sbs-reasoning-bard-bravo-xl-rev6-rc6p4"},passIfAgree:!1}},message:"Ensures whether GPT-4 agrees with a model on a response, gauging the difficulty of the response."},[m.GrammarCheckerPrompt]:{...h,name:"[Prompt] Grammar Error",shortDescription:"PRP: Runs GPT-4 to check prompt grammar and shows tasker where grammar errors are within task",longDescription:'"When Contain grammar errors within the PRP is True, it will provide the following message to the taskers:\n\n    Please ensure that your response is free of any grammar errors.\n    Errors: <grammar errors>"',condition:{scriptName:o.ScriptLinterName.ChatPromptResponsePairLinter,config:{runOnStepTypes:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.TextCollection],promptTemplate:"Examine the given text and report if there are any grammar, typo, or spelling errors.\n\nText:\n{{promptText}}\n\nUse the following output format:\n\nContain grammar errors: <True/False>\nErrors: <grammar errors>",showModelOutput:!0,modelOutputRegexMatch:"Errors: .*",overriddenModelParams:{model:"gpt-4o",temperature:0,max_tokens:512},passIfStringOutputMatches:{regexMatch:"Contain grammar errors: False",flags:"ig"}},validatorCategory:o.ValidatorCategory.GrammarSpelling},message:"Please ensure that your response is free of any grammar errors."},[m.GrammarCheckerResponse]:{...h,name:"[Response] Grammar Error",shortDescription:"PRP: Runs GPT-4 to check response grammar and shows tasker where grammar errors are within task",longDescription:'"When Contain grammar errors within the PRP is True within the Response, it will provide the following message to the taskers:\n\n    Please ensure that your response is free of any grammar errors.\n    Errors: <grammar errors>"',condition:{scriptName:o.ScriptLinterName.ChatPromptResponsePairLinter,config:{runOnStepTypes:[r.InteractionStepType.ModelResponseEditor],promptTemplate:"Examine the given text and report if there are any grammar, typo, or spelling errors.\n\nText:\n{{responseText}}\n\nUse the following output format:\n\nContain grammar errors: <True/False>\nErrors: <grammar errors>",showModelOutput:!0,modelOutputRegexMatch:"Errors: .*",overriddenModelParams:{model:"gpt-4o",temperature:0,max_tokens:512},passIfStringOutputMatches:{regexMatch:"Contain grammar errors: False",flags:"ig"}},validatorCategory:o.ValidatorCategory.GrammarSpelling},message:"Please ensure that your response is free of any grammar errors."},[m.JustificationAndSelectionMatch]:{...h,name:"Justification and Selection match",shortDescription:"PRP: Runs GPT-4 to check whether the selected model response matches the given justification",longDescription:'"This rule checks if the selected model response matches the given justification. If there is a mismatch, it will prompt the taskers with the following message:\n\n    Please ensure that your selected model response matches the given justification.\n    Mismatch details: <details of the mismatch>"',condition:{scriptName:o.ScriptLinterName.ChatPromptResponsePairLinter,config:{runOnStepTypes:[r.InteractionStepType.ModelResponseSelector],promptTemplate:"Ensure that the chosen selected index matches the justification. If the selected index is 0, the justification should be saying that Response A or Response 1 is better; if the selected index is 1, the justification should be saying that Response B or Response 2 is better.\n\n        Selected index: {{selectedIndex}}\n        Justification: {{justification}}\n\n        Use the following output format:\n\n        Contain errors: <True/False>\n        Errors: <grammar errors>",showModelOutput:!0,modelOutputRegexMatch:"Errors: .*",overriddenModelParams:{model:"gpt-4o",temperature:0,max_tokens:512},passIfStringOutputMatches:{regexMatch:"Contain errors: False",flags:"ig"}},validatorCategory:o.ValidatorCategory.GrammarSpelling},message:"Please ensure that your selected model response matches the given justification."},[m.ChatJustificationLikertMatchMLLinter]:{...h,name:"Justification and Likert Match ML Linter",shortDescription:"Runs GPT-4 with multiple model votes to check if the Likert matches the given justification",longDescription:'"This rule checks if the selected model response matches the given justification in the most accurate way"',condition:{scriptName:o.ScriptLinterName.ChatJustificationLikertMatchMLLinter,config:{runOnStepTypes:[r.InteractionStepType.ModelResponseSelector]}},message:"Please ensure that your selected model response matches the given justification."},[m.BadWords]:{...h,name:"[Prompt/Response] Profanity Detected",frontendSeverity:a.LintSeverity.ERROR,shortDescription:"Prevents profanity in response",longDescription:"Prevents profanity in the response. Please see this [doc](https://docs.google.com/spreadsheets/d/1RiXhLe8RnT7zKZZXfNj8uGGYxIdj3csfG6eUpkf2LPw/edit#gid=198521862) for the list of words considered profanity by default.",condition:{scriptName:o.ScriptLinterName.ChatBadWordsLinter,config:{runOnStepTypes:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.ModelResponseEditor]},validatorCategory:o.ValidatorCategory.Spam},message:"Please do not use bad words in your response."},[m.MissingResponse]:{...h,frontendSeverity:a.LintSeverity.ERROR,name:"Missing Required Response",shortDescription:"Requires a response for a field",longDescription:"Linter to enforce that a response isn't empty.",condition:{scriptName:o.ScriptLinterName.ChatMissingResponseLinter,config:{runOnStepTypes:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.ModelResponseEditor,r.InteractionStepType.TextCollection,r.InteractionStepType.TextCollectionPerResponse]},validatorCategory:o.ValidatorCategory.Constraints},message:"Missing response"},[m.UniqueResponse]:{...h,name:"Duplicated Response",message:"The response is too similar to some previously submitted response.",frontendSeverity:a.LintSeverity.ERROR,shortDescription:"Enforce that texts are sufficiently different from previously submitted text, as measured by levenshtein distance",longDescription:'Enforce the currently submitted text is different enough from the historically submitted texts. The historically submitted texts are aggregated from prompt, edited model response, and the relevant textcollection field if "fieldId" is provided.',condition:{scriptName:o.ScriptLinterName.ChatUniqueResponseLinter,config:{runOnStepTypes:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.ModelResponseEditor],minLengthToApply:10,minRelativeLevenshteinDistance:.3,compareDifferentAttempters:!1,attemptsLimit:300,addPrevAttemptsToMessage:!0},validatorCategory:o.ValidatorCategory.Diversity}},[m.AIContentDetector]:{...h,name:"TranslateLength Monitor",shortDescription:'Flags text that are considered AI generated by GPT Zero. Same as "GPT Zero" linter in TextCollection.',longDescription:'Flags text that are considered AI generated by GPT Zero. According to GPT Zero, "At a threshold of 0.88, 85% of AI documents are classified as AI, and 99% of human documents are classified as human. At a threshold of 0.5, 96% of AI documents are classified as AI, and 96% of human documents are classified as human." However, our internal tests indicate a very high false positive rate at 0.5 (likely due to the fact we are often rewriting AI generated text), so we generally recommend setting a higher threshold (e.g., 0.9) if using as a blocking linter. See [GPT Zero docs for more details](https://gptzero.stoplight.io/docs/gptzero-api/d2144a785776b-ai-detection-on-single-string)',condition:{scriptName:o.ScriptLinterName.ChatGPTZeroLinter,config:{runOnStepTypes:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.ModelResponseEditor],average_generated_prob:.5,completely_generated_prob:.9},validatorCategory:o.ValidatorCategory.Cheating},message:"Please do not use AI-generated content."},[m.AIContentDetectorScale]:{...h,name:"AI-generated-content-classifiers",shortDescription:"Flags text that are considered AI generated by Scale classifier",longDescription:"",condition:{scriptName:o.ScriptLinterName.ChatGPTScaleLinter,config:{runOnStepTypes:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.ModelResponseEditor],probability:.5,characterMinimum:250},validatorCategory:o.ValidatorCategory.Cheating},message:"Please do not use AI-generated content."},[m.MinResponseEditDistance]:{...h,name:"[Prompt/Response] More Edits Required",shortDescription:"Enforce levenshtein edits from initial response",longDescription:"",condition:{scriptName:o.ScriptLinterName.ChatMinEditDistanceLinter,config:{runOnStepTypes:[r.InteractionStepType.ModelResponseEditor],minRelativeLevenshteinDistance:.5,minLengthToApply:5,removeMarkdown:!0},validatorCategory:o.ValidatorCategory.GeneralQuality},message:"Please make sure that your response is sufficiently different from the provided response."},[m.NGramDiversity]:{...h,name:"[Prompt] Diversity of Word Choice",frontendSeverity:a.LintSeverity.ERROR,shortDescription:"Enforce diversity of word choice across tasks",longDescription:"Linter to enforce diversity in word choice across tasks. Diversity can be tuned using the supported parameters in the config.",condition:{scriptName:o.ScriptLinterName.ChatNGramDiversityLinter,config:{runOnStepTypes:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.TextCollection],maxMatches:3,numAttempts:20,n:2,ignoreStopWords:!0,additionalStopWords:[],fieldId:""},validatorCategory:o.ValidatorCategory.Diversity},message:"Please rewrite your response as it is too similar to your previous responses."},[m.SpamWords]:{...h,name:"spam-words",frontendSeverity:a.LintSeverity.ERROR,shortDescription:"Blocks suspicous phrases that may be from ChatGPT (e.g., September 2021)",longDescription:"",condition:{scriptName:o.ScriptLinterName.ChatRegexLinter,config:{runOnStepTypes:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.ModelResponseEditor],rules:["(september 2021|knowledge cutoff|open[\\s]*ai|scale[ ]*ai|remotasks|I cannot predict future events|I don't have the capacity|I don't have feelings or emotions|January 2022|January 22|April 2023)"],matches:"none",regexFlags:"ig"},validatorCategory:o.ValidatorCategory.Cheating},message:"Do not include spam phrases, such as those generated in a ChatGPT response."},[m.SemanticSimilarity]:{...h,name:"[Prompt] Similar Prompt Already Submitted",frontendSeverity:a.LintSeverity.ERROR,shortDescription:"Semantic Similarity - Blocks prompts that are too similar from already submitted prompts, based on the meaning of the prompts (instead of word choice).",longDescription:"Compares submitted prompts against all previously submitted prompts in the project and blocks those that are too close, as measured by the cosine similarity of embeddings. Think of embeddings as representing the meaning of a text - texts with more similar meanings will be closer together.\n\n    Here's an example of two prompts that would be considered similar in the embedding space:\n\n    Seven bottles of soda cost $21.00 while 4 bottles of water cost $8. If David wants to buy 3 bottles of soda and 2 bottles of water, how much will that cost?\n\n    Five pens cost $7.50 while 4 pencils cost $1. If Andrew wants to buy 3 pens and 2 pencils, how much will that cost?\n\n    While the word choice is very different, the two prompts are very similar in terms of the problem they are trying to solve.",condition:{scriptName:o.ScriptLinterName.ChatSemanticSimilarityLinter,config:{runOnStepTypes:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.ModelResponseEditor],thresholds:[{threshold:.9,maxPromptsAboveThreshold:0}]},validatorCategory:o.ValidatorCategory.Diversity},message:"Please rewrite your response as it is too similar to some of the previously submitted responses."},[m.Regex]:{...h,name:"Required Text Format Not Followed ",frontendSeverity:a.LintSeverity.ERROR,shortDescription:'Use regular expression rules to prevent the most common errors or enforce certain response formats. Same as "Regex Blocklist" linter in TextCollection.',longDescription:"Please add any phrases or words you want to flag by clicking 'Lint Rule Config', and adding the words within 'rules section'. Any words that may overlap, please use 'exceptions'.\n\n    Example:\n    - Rules: 'Thank you for'\n    - Exception: 'Thank you'",condition:{scriptName:o.ScriptLinterName.ChatRegexLinter,config:{runOnStepTypes:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.ModelResponseEditor],rules:["please","thank you"],matches:o.RegexMatches.None,regexFlags:"i"},validatorCategory:o.ValidatorCategory.GeneralQuality},message:'Do not use words like "please" or "thank you"'},[m.TextLength]:{...h,name:"[Prompt/Response] Minimum/Maximum Word Count Required",frontendSeverity:a.LintSeverity.ERROR,shortDescription:"Enforce a minimum or maximum text length",longDescription:"Restrict by character length by using `minCharacterLength` / `maxCharacterLength`. Restrict by word length by using `minWordLength` / `maxWordLength`.",condition:{scriptName:o.ScriptLinterName.ChatTextLengthLinter,config:{runOnStepTypes:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue],minWordCount:10,maxWordCount:100},validatorCategory:o.ValidatorCategory.Constraints},message:"Please restrict your prompt to 10-100 words."},[m.MLQualitySingletonMetric]:{...h,name:"Response Quality Flag",shortDescription:"Linters created by our ML team to target common issues. See [ML-based Quality Linter](https://scale.atlassian.net/wiki/spaces/OP/pages/452493395/ML-based+Quality+Linters) for more details.",longDescription:'"The thresholds define the range in which the linter will flag the task. For example, if you set a Lower Bound Threshold of 0.25 and a Threshold Score of 0.5, only tasks within 0.25 to 0.50 will be flagged.\n\n    Typically, you should set the Lower Bound Threshold to be 0 if you want to set a certain quality metric to be up to a certain standard (that you set as Threshold Score), since it\'ll flag everything below that standard.\n\n    For Blocking: If you would like Logical Complexity to be somewhat complex(0.25, 0.5), then you would set the lower bound threshold to 0 and upper bound threshold to 0.25\n\n\n    For Warning:"\n\n    ',condition:{scriptName:o.ScriptLinterName.ChatMLSingletonQualityMetricLinter,config:{runOnStepTypes:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.ModelResponseEditor],qualityMetricType:s.SingletonQualityMetricType.GrammaticalityNormalized,lowerBoundScore:0,thresholdScore:.5},validatorCategory:o.ValidatorCategory.GeneralQuality},message:"Please ensure that your response is grammatically correct."},[m.MLQualityPRPMetric]:{...h,name:"Prompt and Response Logic Error",shortDescription:"Looks at both Prompt and Response. Currently only available with Relevance",longDescription:"Linters created by our ML team to target common issues. See [ML-based Quality Linter](https://scale.atlassian.net/wiki/spaces/OP/pages/452493395/ML-based+Quality+Linters) for more details.",condition:{scriptName:o.ScriptLinterName.ChatMLPromptResponsePairQualityMetricLinter,config:{runOnStepTypes:[r.InteractionStepType.ModelResponseEditor],qualityMetricType:s.PromptResponsePairQualityMetricType.RelevanceNormalized,lowerBoundScore:0,thresholdScore:.5}},message:"Please ensure that your response is relevant to the prompt."},[m.PromptResponsePairNumerical]:{...h,name:"Text Flag - Numerical Match",shortDescription:"PRP: Run any GPT-4 prompt and lint based on outputted number",longDescription:"Configure a prompt for GPT-4 to validate tasker response against a numerical output to lint against.",condition:{scriptName:o.ScriptLinterName.ChatPromptResponsePairLinter,config:{runOnStepTypes:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue],systemPrompt:"You are a helpful assistant for evaluating how complex a user query is.",promptTemplate:'Examine the given user query to determine how difficult it is for a large language model to produce an excellent response to the query. First, you must rate the query on a scale of 1 to 10 by strictly following this format: "Rating: rating", for example: "Rating: 5". After your rating, provide a short explanation. Be as objective as possible.\n\n[User query]\n{{promptText}}\n\nRating: ',passIfNumericOutputMatches:{comparator:"gte",threshold:5},showModelOutput:!1},validatorCategory:o.ValidatorCategory.GeneralQuality},message:"Please write a more complex and challenging prompt for our bot (e.g., specify the audience / viewpoint, length, outline of the response, tone of voice, level of difficulty / detail expected, expected number of outputs, etc.,). If your prompt is being flagged, it means that you should add some of these parameters (if applicable!)."},[m.PromptResponsePairString]:{...h,name:"Text Flag - String Match",shortDescription:"PRP: Run any GPT-4 prompt and lint based on outputted string",longDescription:"Configure a prompt for GPT-4 to validate tasker response against a string output to lint against.",condition:{scriptName:o.ScriptLinterName.ChatPromptResponsePairLinter,config:{runOnStepTypes:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.TextCollectionPerResponse,r.InteractionStepType.ModelResponseSelector],promptTemplate:"Examine the given text and report if there are any grammar errors.\n        \nText:\n{{promptText}}\n\nContain grammar errors: <True/False>\nErrors: <grammar errors>\n",showModelOutput:!0,overriddenModelParams:{model:"gpt-4o",temperature:0,max_tokens:512},passIfStringOutputMatches:{regexMatch:"Contain grammar errors: False",flags:"ig"}},validatorCategory:o.ValidatorCategory.GeneralQuality},message:"Please ensure that your response is free of any grammar errors."},[m.MultiTurnResponseSimilarity]:{...h,name:"Too Similar To Previous Conversation Text",frontendSeverity:a.LintSeverity.ERROR,shortDescription:"Requires prompt, responses, and relevant textcollection fields within the same chat are sufficiently different, as measured by the levenshtein distance",longDescription:'Enforce the currently submitted text is different enough from the texts of previous turns, which are aggregated from prompt, edited model response, and the relevant textcollection field if "fieldId" is provided in the current attempt.',condition:{scriptName:o.ScriptLinterName.ChatMultiTurnResponseSimilarityLinter,config:{runOnStepTypes:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.ModelResponseEditor],minRelativeLevenshteinDistance:.4,minWordsToApply:5},validatorCategory:o.ValidatorCategory.Diversity},message:"Please do not write similar responses across multiple turns."},[m.ChatValidLikertScore]:{...h,name:"Likert score validator",frontendSeverity:a.LintSeverity.ERROR,shortDescription:"Verifies the consistency of Likert scale (1-7) ratings, ensuring that if model response A is rated as the best, the scale also reflects a preference for A.",longDescription:"The Linter is a verification process involves a detailed analysis of the Likert scale ratings. If model response A is rated as the best, the tool systematically reviews the scale to ensure that the numerical scores are higher for A than for B. This check is crucial in research or evaluation settings where accurate and consistent measurement of preferences or perceptions is essential. The tool likely employs statistical or computational methods to analyze the ratings, identify any inconsistencies, and flag them for further review.",condition:{scriptName:o.ScriptLinterName.ChatValidLikertScoreLinter,config:{runOnStepTypes:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.ModelResponseEditor,r.InteractionStepType.TextCollection]},validatorCategory:o.ValidatorCategory.GeneralQuality},message:"Please ensure that your ratings match the selected model response."},[m.GoogleTranslateDetector]:{...h,name:"[needs configuration] google-translate-detector",shortDescription:"Custom linter for Vertigo Language Rewrite. Compares Google Translate output of prompt (original text) to the tasker response (translated text)",longDescription:"This linter was custom built for Vertigo Language Rewrite. It assume that the task is set up such that the original text is the chat Prompt and the translated text is the chat Response. It then puts the Prompt through Google Translate and compared the Levenshtein Distance to tha Response.",condition:{scriptName:o.ScriptLinterName.ChatGoogleTranslateDetectionLinter,config:{runOnStepTypes:[r.InteractionStepType.ModelResponseEditor],minRelativeLevenshteinDistance:.2,minWordsToApply:5},validatorCategory:o.ValidatorCategory.Other},message:"Please do not copy results from Google translate."},[m.URLExists]:{...h,name:"URL Does Not Work",frontendSeverity:a.LintSeverity.ERROR,shortDescription:"Checks if the URL provided is a working link",longDescription:"This will verify that the url link is a valid link but will not check if it has paywalls within the website. To make sure the URL-exist is working on the ChatTask Reference URL section, please select 'PromptInput'  within 'Restrict by step types'",condition:{scriptName:o.ScriptLinterName.ChatURLExistsLinter,config:{runOnStepTypes:[]},validatorCategory:o.ValidatorCategory.GeneralQuality},message:"Please ensure that your response contains a valid URL."},[m.PromptResponseWordCountDiff]:{...h,name:"Translated Text Length Too Different",shortDescription:"Custom linter for translation projects. Check whether the length of the translated text is way to off from the length of the source text.",condition:{scriptName:o.ScriptLinterName.ChatPromptResponseWordCountDiffLinter,config:{runOnStepTypes:[r.InteractionStepType.ModelResponseEditor],minWordsToApply:5,maxWordsCountMultiplier:1.2,minWordsCountMultiplier:.8}},message:"Please ensure that your response length is not too different from the prompt length."},[m.SphereExecutionOutputLinter]:{...h,name:"[needs configuration] sphere-execution-output-linter",condition:{scriptName:o.ScriptLinterName.ChatSphereExecutionOutputLinter,config:{runOnStepTypes:[r.InteractionStepType.TextCollection,r.InteractionStepType.ModelResponseEditor],codeFieldId:"solution_code",concatCodeFieldIds:[],outputFieldId:"textual_code_output",sphereProjectId:"",language:"",scenarioName:"run",sphereProjectCodeFilePath:"prog.py",lintForCodeFailure:!1}},message:"Code error. "},[m.ChatNightingaleCustomizedLinter]:{...h,name:"Nightingale Categorization Helper",condition:{scriptName:o.ScriptLinterName.ChatNightingaleCustomizedLinter,config:{}},message:"Please confirm you selected the correct category."},[m.ChatNightingaleArchetypeDiversityLinter]:{...h,name:"[out-of-the-box] nightingale-archetype-diversity-linter",condition:{scriptName:o.ScriptLinterName.ChatNightingaleArchetypeDiversityLinter,config:{runOnStepTypes:[r.InteractionStepType.TextCollection],minPercentFollowUps:.6,maxNormalQuestions:3,maxStatementQuestions:2,maxQuestionsWithContextStatements:2,maxClarifications:1}},message:"Please select a diverse set of categories."},[m.ChatNightingaleGoalAlignmentLinter]:{...h,name:"[out-of-the-box] nightingale-goal-alignment-linter",condition:{scriptName:o.ScriptLinterName.ChatNightingaleGoalAlignmentLinter,config:{runOnStepTypes:[r.InteractionStepType.PromptInput,r.InteractionStepType.ModelResponseEditor,r.InteractionStepType.MultiTurnContinue],promptAlignmentTemplate:"Examine the given 'User Prompt' and 'Dialogue Goal' and determine whether or not the userprompt is asking questions related to the dialogue goal with 'Yes'/'No'. Remember that the user prompt should ask questions that eventually achieves the dialogue goal within a conversation. If its directly or indirectly related, it should output only 'Yes'. If No, Provide an explanation on why its not relevant to the the dialogue goal and suggestions on how to rephrase it.\nUser Prompt: {{user_prompt}}\nDialogue Goal: {{dialogue_goal}}",dialogueAlignmentTemplate:"Examine the given 'Dialogue' and 'Dialogue Goal' and determine whether or not the dialogue is related to the dialogue goal with 'Yes'/'No'. Remember that the dialogue should ask questions that eventually achieves the dialogue goal within a conversation. If its directly or indirectly related, it should output only 'Yes'. If No, Provide an explanation on why its not relevant to the the dialogue goal and suggestions on how to rephrase it.\nDialogue: {{dialogue}}\nDialogue Goal: {{dialogue_goal}}"}},message:"Please ensure that the conversation is aligned with the dialogue goal."},[m.ChatNightingalePlagiarismLinter]:{...h,name:"[out-of-the-box] nightingale-plagiarism-linter",condition:{scriptName:o.ScriptLinterName.ChatNightingalePlagiarismLinter,config:{runOnStepTypes:[r.InteractionStepType.ModelResponseEditor],nGram:3,maxAllowedRepetition:0}},message:"Please do not copy text from above."},[m.ChatNightingaleReferenceLinter]:{...h,name:"[out-of-the-box] nightingale-reference-linter",condition:{scriptName:o.ScriptLinterName.ChatNightingaleReferenceLinter,config:{runOnStepTypes:[r.InteractionStepType.ModelResponseEditor]}},message:"Do not use outside knowledge to draft the agent response!"},[m.ChatNightingaleValidateArchetypeLinter]:{...h,name:"[out-of-the-box] nightingale-validate-archetype-linter",condition:{scriptName:o.ScriptLinterName.ChatNightingaleValidateArchetypeLinter,config:{runOnStepTypes:[r.InteractionStepType.TextCollection]}},message:"Invalid selections in turn"},[m.ChatNightingaleWordCountLinter]:{...h,name:"[out-of-the-box] nightingale-word-count-linter",condition:{scriptName:o.ScriptLinterName.ChatNightingaleWordCountLinter,config:{runOnStepTypes:[r.InteractionStepType.ModelResponseEditor,r.InteractionStepType.TextCollection]}},message:"The text is insufficient"},[m.ChatNightingaleRankingConsistencyLinter]:{...h,name:"[out-of-the-box] chat-nightingale-ranking-consistency-linter",condition:{scriptName:o.ScriptLinterName.ChatNightingaleRankingConsistencyLinter,config:{runOnStepIds:["430d534f-55d5-4545-9f42-7a1519d906ad"]}},message:"Please check your helpfulness ratings to make sure they\u2019re consistent with your model rankings."},[m.ChatNightingaleRatingConsistencyLinter]:{...h,name:"[out-of-the-box] chat-nightingale-rating-consistency-linter",condition:{scriptName:o.ScriptLinterName.ChatNightingaleRatingConsistencyLinter,config:{runOnStepTypes:[r.InteractionStepType.TextCollectionPerResponse]}},message:"Please check the consistency of your ratings."},[m.ChatPromptComparisonToSearchResult]:{...h,name:"prompt-comparison-to-search-result",condition:{scriptName:o.ScriptLinterName.ChatPromptComparisonToSearchResult,config:{runOnStepTypes:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue],useGPT:!0,useLevenshtein:!0,threshold:.7}},message:"Please do not copy examples from search results"},[m.ChatBulbaFactualityLinter]:{...h,name:"[out-of-the-box] bulba-factuality-linter",condition:{scriptName:o.ScriptLinterName.ChatBulbaFactualityLinter,config:{}},message:"Please ensure that the snippets in your thought process and selected sources are consistent."},[m.ChatNERSentenceLinter]:{...h,name:"[out-of-the-box] ner-sentence-linter",condition:{scriptName:o.ScriptLinterName.ChatNERSentenceLinter,config:{runOnStepTypes:[r.InteractionStepType.NER],sentenceDelimiters:[".","\n"]}},message:"Please ensure that each label covers exactly one sentence."},[m.ChatBulbaLikertResponseValidator]:{...h,name:"[Bulba MT] Likert_response_bad_validator",condition:{scriptName:o.ScriptLinterName.ChatBulbaLikertResponseValidator,config:{runOnStepTypes:[r.InteractionStepType.TextCollection]}},message:"Please check the response rating and if it meets the standards"},[m.ChatBulbaLockFieldLinter]:{...h,name:"[Bulba MT] Lock_field_linter",condition:{scriptName:o.ScriptLinterName.ChatBulbaLockFieldLinter,config:{runOnStepTypes:[r.InteractionStepType.TextCollection]}},message:"Please check that you did not edit the locked field"},[m.ChatBulbaCodeEvalCodePresentLinter]:{...h,name:"[Bulba Code Eval] Code Present Linter",condition:{scriptName:o.ScriptLinterName.ChatBulbaCodeEvalCodePresentLinter,config:{runOnStepTypes:[r.InteractionStepType.TextCollectionPerResponse]}},message:"Please ensure that your responses correspond with whether there is code in the response."},[m.ChatImageNSFWLinter]:{...h,name:"[needs configuration] NSFW Image Linter",shortDescription:"Linter to check if the image contains unsafe or sensitive elements",longDescription:"Use this linter to check if the image contains any sensitive elements across 15+ categories. The linter works only on image URLs on either a text collection field or on reference text URLs. The linter will send the URL to our internal image model and if the model deems the image to be sensitive, then the configured thresholds will be used to determine if an image is sensitive.",condition:{scriptName:o.ScriptLinterName.ChatImageNSFWLinter,config:{runOnStepTypes:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.TextCollection],thresholds:{animal_violence:.5,blood_and_gore:.5,child_present:.5,cigarettes_and_tobacco_products:.5,explosions:.5,exposed_breasts:.5,exposed_butts:.5,genitalia:.5,guns:.5,harassment_and_hate_speech:.5,knives:.5,marijuana:.5,other_drugs:.5,other_weapons:.5,physical_violence:.5,sex_toys:.5,sexual_activity:.5,suggestive:.5,is_sensitive:.5}},validatorCategory:o.ValidatorCategory.Multimodal},message:"Please ensure that the image doesn't contain unsafe or sensitive elements"},[m.ChatMRSSphereExecutionRelevanceLinter]:{...h,name:"[MRS / Sphere Workspace] Code Relevance Linter",condition:{scriptName:o.ScriptLinterName.ChatMRSSphereExecutionRelevanceLinter,config:{runOnStepTypes:[r.InteractionStepType.TextCollectionPerResponse,r.InteractionStepType.TextCollection],promptTemplate:"Examine the given code and determine if it is relevant to the model output.\n          Code:\n          {{executedCode}}\n\n          The model output is as follows:\n          {{modelOutput}}\n\n          Output True or False",systemPrompt:"You are a helpful assistant for evaluating whether the executed code is relevant to the provided model output.",overriddenModelParams:{model:"gpt-4o",temperature:0,max_tokens:512}},validatorCategory:o.ValidatorCategory.Other},message:"Please ensure that the code you executed in Sphere Engine is from the model response output."},[m.ChatGoogleSearchPlagiarismLinter]:{...h,name:"[needs configuration] google-search-plagiarism-linter",shortDescription:"Compares text responses to Google search results and flags if an instance of plagiarism is detected",longDescription:"Use this linter to compare each sentence in a text response against Google search results for it (using SerpAPI) to detect instances of plagiarism.\n      The similarity threshold and number of allowed sentence matches is configurable, as well as how many search results to compare each sentence against.\n      Similarity can be measured using Levenshtein distance, GPT-4 prompting, or both.\n      ",condition:{scriptName:o.ScriptLinterName.ChatGoogleSearchPlagiarismLinter,config:{runOnStepTypes:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.ModelResponseEditor],useGPT:!0,useLevenshtein:!1,sentenceMatchThreshold:.9,allowedSentenceMatches:2,searchResultsToCompare:3}},message:"Please do not plagiarize text from the internet"},[m.ChatMultiModalRelevanceLinter]:{...h,name:"multi-modal-relevance-linter",shortDescription:"Compares the relevance of an image to the prompt and response and flags if something is not relevant",longDescription:"Use this linter to compare the relevance of an image to the prompt response chain. This linter will send the image and prompts and responses to gpt4 and ask it if the text is relevant to the image. The linter will then flag the task if the model deems the prompt to be irrelevant to the image.",condition:{scriptName:o.ScriptLinterName.ChatMultiModalRelevanceLinter,config:{runOnStepTypes:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.ModelResponseEditor]},validatorCategory:o.ValidatorCategory.Multimodal},frontendLinterFeedbackRate:100,message:"Please ensure that what you enter is relevant to the image and the prior conversation"},[m.ChatLatexParsingLinter]:{...h,name:"latex-parsing-linter",shortDescription:"Checks if the latex code properly compiles",longDescription:"Use this linter to check if the latex code provided compiles properly. The linter will check if the latex code compiles without any errors and will flag the task if the code does not compile.",condition:{scriptName:o.ScriptLinterName.ChatLatexParsingLinter,config:{runOnStepTypes:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue,r.InteractionStepType.ModelResponseEditor]}},message:"Please ensure that your latex code compiles properly"},[m.ChatBlockMMMULinter]:{...h,name:"block-mmmu-linter",shortDescription:"Blocks prompt submission if it includes an image that is in MMMU",longDescription:"Use this linter to check if submitted images are in the MMMU database. If any of the submitted images in prompt steps that this linter is enabled on are in the MMMU database, it flags the submission.",condition:{scriptName:o.ScriptLinterName.ChatBlockMMMULinter,config:{runOnStepTypes:[r.InteractionStepType.PromptInput,r.InteractionStepType.MultiTurnContinue],similarityThreshold:.9},validatorCategory:o.ValidatorCategory.Multimodal},message:"Submission contains an image from the MMMU dataset, please use a different image"}};t.LinterPresets=f},402168:function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.REWARD_MODEL_ROUTING_OVERRIDE=t.AFTER_MOCK_TEMPLATES=t.TURN_MOCK_TEMPLATES=t.BEFORE_MOCK_TEMPLATES=t.GENERAL_MOCK_TEMPLATES=t.QIR_MOCK_TEMPLATES=t.DEFAULT_PER_RESPONSE_FIELDS=t.DEFAULT_PROCESS_SUPERVISION_EDIT_CHUNKS_TITLE=t.DEFAULT_PROCESS_SUPERVISION_SUBTITLE=t.DEFAULT_PROCESS_SUPERVISION_TITLE=t.DEFAULT_SEARCH_REFERENCES_SUBTITLE=t.DEFAULT_SEARCH_REFERENCES_TITLE=t.DEFAULT_SEARCH_AUTOCOMPLETE_SUBTITLE=t.DEFAULT_SEARCH_AUTOCOMPLETE_TITLE=t.DEFAULT_NER_SUBTITLE=t.DEFAULT_NER_TITLE=t.DEFAULT_TEXTCOLLECTION_SUBTITLE=t.DEFAULT_TEXTCOLLECTION_TITLE=t.DEFAULT_MODEL_EDITOR_SUBTITLE=t.DEFAULT_MODEL_EDITOR_TITLE=t.DEFAULT_MODEL_RESPONSE_RANKING_SUBTITLE=t.DEFAULT_MODEL_RESPONSE_RANKING_TITLE=t.DEFAULT_MODEL_SELECTOR_SUBTITLE=t.DEFAULT_MODEL_SELECTOR_TITLE=t.DEFAULT_INSTRUCTION_SUBTITLE=t.DEFAULT_INSTRUCTION_TITLE=t.DEFAULT_PROMPT_INPUT_INSTRUCTIONS=t.DEFAULT_PROMPT_INPUT_SUBTITLE=t.DEFAULT_PROMPT_INPUT_TITLE=void 0;var n=i(963494),r=i(232095),o=i(392228);const s="Start a Chat";t.DEFAULT_PROMPT_INPUT_TITLE=s;const a="Write a prompt to start a chat session with the model.";t.DEFAULT_PROMPT_INPUT_SUBTITLE=a;const l="\n  Please write a prompt that you would like the model to respond to. The prompt should be a short paragraph of text that is 1-3 sentences long. The prompt should be open-ended and not contain any specific questions.\n  It\u2019s okay if the model\u2019s response is very bad! Please continue to write complex prompts even if the model doesn\u2019t know how to respond! We actually want to see more instances of where the model is bad at responding. The worse the model\u2019s response, the better!\n".trim();t.DEFAULT_PROMPT_INPUT_INSTRUCTIONS=l;const c="Review the instructions";t.DEFAULT_INSTRUCTION_TITLE=c;const d="Read the instructions carefully before continuing.";t.DEFAULT_INSTRUCTION_SUBTITLE=d;const p="Select the best response";t.DEFAULT_MODEL_SELECTOR_TITLE=p;const u="When the responses are fully loaded, select the best response from the options.";t.DEFAULT_MODEL_SELECTOR_SUBTITLE=u;const h="Rank responses from best to worst";t.DEFAULT_MODEL_RESPONSE_RANKING_TITLE=h;const m="Drag and drop candidates into the classification groups.";t.DEFAULT_MODEL_RESPONSE_RANKING_SUBTITLE=m;const f="Refine your response";t.DEFAULT_MODEL_EDITOR_TITLE=f;const y="Edit the response to make it more appropriate for the prompt.";t.DEFAULT_MODEL_EDITOR_SUBTITLE=y;const g="Answer the questions below";t.DEFAULT_TEXTCOLLECTION_TITLE=g;const T="Label your response according to the questions below.";t.DEFAULT_TEXTCOLLECTION_SUBTITLE=T;const b="Annotate the response";t.DEFAULT_NER_TITLE=b;const _="Label the entities in the response per the instructions.";t.DEFAULT_NER_SUBTITLE=_;const I="Improve the model response";t.DEFAULT_SEARCH_AUTOCOMPLETE_TITLE=I;const v="When the response is fully loaded, search for helpful references and regenerate the response.";t.DEFAULT_SEARCH_AUTOCOMPLETE_SUBTITLE=v;const S="Search for references";t.DEFAULT_SEARCH_REFERENCES_TITLE=S;const C="Search for helpful references and write the response.";t.DEFAULT_SEARCH_REFERENCES_SUBTITLE=C;const L="Review the response and rate each piece";t.DEFAULT_PROCESS_SUPERVISION_TITLE=L;const x="When the response is fully loaded, rate each piece of the response.";t.DEFAULT_PROCESS_SUPERVISION_SUBTITLE=x;t.DEFAULT_PROCESS_SUPERVISION_EDIT_CHUNKS_TITLE="Please split the following message into chunks and ensure that all of the original content is preserved.";const E=[{min:1,max:5,step:1,use_slider:!0,required:!0,type:n.TextCollectionFieldType.Number,field_id:"response_accuracy",title:"Accuracy",prefix:"Insufficient",mid_label:"Minimum",suffix:"Good",description:"The extent to which the information presented is accurate, reliable, and aligns with established facts or evidence.",rubric:"| Criteria                                                                                                                                                                                                                                                                    | 1-2  (Insufficient)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          | 3 (Minimum| 4-5 (Good)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             |\n|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------        |----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------        |||\n| <h3>Accuracy</h3>_The extent to which the information presented is accurate, reliable, and aligns with established facts or evidence._<br><h3>Weight: 25%</h3>                                                                                                              | <ul><li><b>Central Claims</b> - One or more incorrect claims are central or core to the conclusion, thesis, or key supporting points of the response</li><br><li><b>Supporting Claims</b> - 2 or more pieces of supporting evidence are false</li><br><li><b>Verifiable</b> - Conclusive, common-knowledge counterfactual information can be found via a Google search</li>                                                                                                                                                                                                  | <ul><li><b>Central Claims</b> - All central claims are correct and accurate</li><br><li><b>Supporting Claims</b> - Up to 1 incorrect supporting point that, if corrected, would not meaningfully alter the core thesis or conclusion</li><br><li><b>Verifiable</b> - Falsely asserts claims or evidence that are not fully proven / controversial as fact</li></ul>                                                                                                                                                                                                                                                                              | <ul><li><b>Central Claims</b> - All central claims are correct and accurate</li><br><li><b>Supporting claims</b> - All supporting claims are accurate and correct</li><br><li><b>Verifiable</b> - No claims or evidence are incorrect or false, and are verifiable through general available information, and trusted sources. All potentially controversial,  generalized statements or opinions  are presented with appropriate caveats</li></ul>                                                                                                                                                                                                                    |"},{required:!0,type:n.TextCollectionFieldType.Text,field_id:"response_accuracy_reasoning",title:"Accuracy Reasoning",description:"If there are factual information, share URL links that refutes the response statements. Make sure to write in full sentences to explain why the response has inaccurate statements. ",hint:'If URL verification was not required, please provide a reason why you think "URL" is factually accurate',min_characters:50,conditions:[{response_accuracy:["1","2"]}]},{min:1,max:5,step:1,use_slider:!0,required:!0,type:n.TextCollectionFieldType.Number,field_id:"response_completeness",title:"Completeness",prefix:"Insufficient",mid_label:"Minimum",suffix:"Good",description:"The extent to which the answer addresses all aspects of the prompt, ensuring that no essential information is omitted. All prompt instructions were followed; response delivered fully on the asks of the prompt.",rubric:"| Criteria                                                                                                                                                                                                                                                                    | 1-2  (Insufficient| 3 (Minimum| 4-5 (Good|\n|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------        ||||\n| <h3>Completeness</h3>_The extent to which the answer addresses all aspects of the prompt, ensuring that no essential information is omitted._<br><h3>Weight: 15%</h3>                                                                                                       | <ul><li><b>Prompt Request Coverage</b> - The response does not address all explicit asks of the prompt</li><br><li><b>Constraints</b> - The prompt did not address all of the constraints placed in service of the requests</li><br><li><b>Breadth of Solutions [STEM]</b> - The response does not show multiple possible options to solve the question within the prompt</li></ul>                                                                                                                                                                                          | <ul><li><b>Prompt Request Coverage</b> -The response addresses all explicit asks of the prompt</li><br><li><b>Constraints</b> - <br>The prompt completed the requests within the prompt, including the constraints placed in service of those requests</li><br><li><b>Breadth of Solutions [STEM]</b> - <br>The response references multiple possible solutions, but does not explain in-depth or cost/benefits of each solution</li></ul>                                                                                                                                                                                                       | <ul><li><b>Prompt Request Coverage</b> - The response addresses all explicit asks of the prompt</li><br><li><b>Constraints</b> - The prompt completed the requests within the prompt, including the constraints placed in service of those requests</li><br><li><b>Breadth of Solutions [STEM]</b> - The response shows multiple possible solutions, provides analysis of each, and provides a recommendation for which is the most elegant solution to solve the problem</li></ul>                                                                                                                                                                                    |"},{min:1,max:5,step:1,use_slider:!0,required:!0,type:n.TextCollectionFieldType.Number,field_id:"response_relevance",title:"Relevance",prefix:"Insufficient",mid_label:"Minimum",suffix:"Good",description:"How useful the supporting information and claims are in answering the question or prompt. The appropriate answer should be relevant to the question or request, and should reflect and meet the user's request. Responses should meet all category-specific requirements. ",rubric:"| Criteria                                                                                                                                                                                                                                                                    | 1-2  (Insufficient| 3 (Minimum| 4-5 (Good|\n|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------        ||||\n| <h3>Relevance</h3>_How useful  the supporting information and claims are in answering the question or prompt._<br><h3>Weight: 15%</h3>                                                                                                                                      | <ul><li><b>Supporting content</b> - The key points provided are unrelated to the central claim or thesis</li><br><li><b>Specificity</b> - The examples brought up are vague and overly general</li><br><li><b>Usefulness</b> - The information provided to justify or support any of the key points of the response does not logically contribute to the main claim</li></ul>                                                                                                                                                                                                | <ul><li><b>Supporting content</b> - The supporting information and evidence is tangentially related to the central claim or thesis</li><br><li><b>Specificity</b> - The information provided contains a few selected examples, but doesn\u2019t explain and relate them them back to the original response</li><br><li><b>Usefulness</b> - There is a mix of useful, and irrelevant but not directly useful information within the response. The core requests/demands of the prompt are still satisfied within the response, despite the irrelevant information</li></ul>                                                                            | <ul><li><b>Supporting content</b> - The supporting information logically defends or clearly illustrates the key points and  the central claims made in the response</li><br><li><b>Specificity</b> - The claims are supported with precise, rigorously chosen, examples that are related back to the original claims</li><br><li><b>Usefulness</b> - Each paragraph and sentence directly adds value to the claims or context of the response</li></ul>                                                                                                                                                                                                                |"},{type:n.TextCollectionFieldType.Number,field_id:"response_depth",title:"Depth",required:!0,description:"The level of detail, insight, and nuance the response provides.",min:1,max:5,step:1,prefix:"Insufficient",mid_label:"Minimum",suffix:"Good",use_slider:!0,rubric:"| Criteria                                                                                                                                                                                                                                                                    | 1-2  (Insufficient| 3 (Minimum| 4-5 (Good|\n|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------        ||||                                                                                                                                                                                                              \n| <h3>Depth</h3>_The level of detail, insight, and nuance the response provides._<br><h3>Weight: 10%</h3>                                                                                                                                                                     | <ul><li><b>Justification</b> - There is no supporting information at all. The response does not include meaningfully relevant insights, evidence, details, or examples</li><br><li><b>Context</b> - The response omits important or necessary background information to understand the content of the response</li><br><li><b>Logical Reasoning</b> - No rationale is provided at all</li></ul>                                                                                                                                                                              | <ul><li><b>Justification</b> - The supporting information was helpful in understanding and justifying the claims but was surface-level. There was analysis missing that is usually not found on a cursory google search.</li><br><li><b>Context</b> - The response provides the most important or necessary background context, but may omit or ignore minor background information</li><br><li><b>Logical reasoning</b> - The chain-of-thought-reasoning is included, but shallow, and can be more complete, and/or step-by-step</li></ul>                                                                                                      | <ul><li><b>Justification</b> - The supporting information includes ample relevant insights, evidence, details, and examples. The supporting information and evidence is exhaustive in regards to supporting the set of claims (i.e., there is a specific example or justification for each main claim)</li><br><li><b>Context</b> - The response provides the necessary useful background information and context in order for the user to understand the response</li><br><li><b>Logical reasoning</b> - The chain-of-reasoning of the response is sufficient and addresses most, if not all, immediate follow-up/related questions a user may have</li></ul>         |"},{type:n.TextCollectionFieldType.Number,field_id:"response_conciseness",title:"Conciseness",description:"How effectively the written response conveys information without unnecessary repetition or wordiness.",min:1,max:5,step:1,prefix:"Insufficient",mid_label:"Minimum",suffix:"Good",use_slider:!0,required:!0,rubric:"| Criteria                                                                                                                                                                                                                                                                    | 1-2  (Insufficient| 3 (Minimum| 4-5 (Good|\n|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------        ||||\n| <h3>Conciseness</h3>_How effectively the written response conveys information without unnecessary repetition or wordiness_<br><h3>Weight: 10%</h3>                                                                                                                          | <ul><li><b>Repetition</b> - The response communicates the exact same ideas, but potentially in slightly different ways, multiple times within the response. The repetition is not used for stylistic effect</li><br><li><b>Length</b> - The response is overly verbose, and/or significantly exceeds the the word limits directly imposed by the prompt</li><br><li><b>Verbosity</b> - Reponses with poor conciseness take multiple sentences to explain concepts that are possible within a sentence or two.</li></ul>                                                      | <ul><li><b>Repetition</b> - The response communicates the exact same ideas, but in slightly different ways multiple times within the response. The repetition is not used for stylistic effect</li><br><li><b>Length</b> - The response is close to the length specified explicitly by the prompt</li><br><li><b>Verbosity</b> - Response explains most of its concepts or points efficiently, but still may have some overly verbose sentences or claims</li></ul>                                                                                                                                                                              | <ul><li><b>Repetition</b> - Response does not unnecessarily repeat information, implicitly or explicitly, unless as a  stylistic device to emphasize certain key points</li><br><li><b>Length</b> - The response fits the length specified explicitly by the prompt</li><br><li><b>Verbosity</b> - Response efficiently communicates its concepts and points consistently. Concise responses can still be long, if all of the added content adds discrete value in furtherance of the core claims of the response</li></ul>                                                                                                                                            |"},{type:n.TextCollectionFieldType.Number,field_id:"response_spelling_grammar",title:"Spelling and Grammar",description:"The correctness of the spelling and grammatical structure, and the quality of sentence structure.",required:!0,digits:1,min:1,max:5,step:1,prefix:"Insufficient",mid_label:"Minimum",suffix:"Good",use_slider:!0,rubric:"| Criteria                                                                                                                                                                                                                                                                    | 1-2  (Insufficient| 3 (Minimum)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      | 4-5 (Good|\n|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------        ||||\n| <h3>Spelling & Grammar</h3>_The correctness of the spelling and grammatical structure, and the quality of sentence structure_<br><h3>Weight: 10%</h3>                                                                                                                       | <ul><li><b>Readability</b> - The response has multiple spelling or grammatical errors that significantly impact the readability - how easily the response can be parsed by human readers</li><br><li><b>Language Mechanics</b> - Response includes errors that may encompass incorrect verb forms, sentence structure problems, run-on sentences, punctuation and sentence fragments</li></ul>                                                                                                                                                                               | <ul><li><b>Readability</b> - The response has some spelling or grammatical errors but the response is still readable</li><br><li><b>Language Mechanics</b> - Response indicates proficient use of language mechanics, with only minor corrections</li></ul>                                                                                                                                                                                                                                                                                                                                                                                      | <ul><li><b>Readability</b> - The response has no spelling or grammatical errors</li><br><li><b>Language Mechanics</b> - Response indicates advanced use of language mechanics, with no minor corrections</li></ul>                                                                                                                                                                                                                                                                                                                                                                                                                                                     |"},{type:n.TextCollectionFieldType.Number,field_id:"response_formatting",title:"Formatting and Coherence",required:!0,description:"The organization and presentation of the written response, including elements such as structure, layout, and visual clarity. Do the individual paragraphs flow together and are relevant/understandable? Formatting includes elements like line breaks, indentation, textual attributes like bold/underline, and list/table presentation, where applicable.",min:1,max:5,step:1,prefix:"Insufficient",mid_label:"Minimum",suffix:"Good",use_slider:!0,rubric:"| Criteria                                                                                                                                                                                                                                                                    | 1-2  (Insufficient| 3 (Minimum| 4-5 (Good|\n|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------        ||||\n| <h3>Formatting and Coherence</h3>_The organization and presentation of the written response, including elements such as structure, layout, and visual clarity. Do the individual paragraphs flow together and are relevant/understandable?_<br><h3>Weight: 10%</h3>         | <ul><li><b>Visual Presentation</b> - There is no visual separation between ideas; Distinct ideas are lumped together in one paragraph</li><br><li><b>Text Formatting</b> -  Lists are not broken into bullet point; Markdown is broken.</li><br><li><b>Outline and Coherence</b> - The ideas covered in the response are not outlined /or presented in a logical order. Each paragraph jumps from idea to idea with no logical transition</li></ul>                                                                                                                          | <ul><li><b>Visual Presentation</b> - The ideas covered in the response are visually separated into distinct text space</li><li><b>Text Formatting</b> -  Lists are used when appropriate, including bolding where relevant. Markdown renders appropriately. Key detail may not be bolded</li><br><li><b>Outline and Coherence</b> - The ideas covered in the response are outlined, but the transition between paragraphs and ideas could be improved</li><br></ul>                                                                                                                                                                              | <ul><li><b>Visual Presentation</b> - The ideas covered in the response are visually separated into distinct text spaces. Whitespace is used intentionally with added effect.</li><li><b>Text Formatting</b> - Lists are used when appropriately, including bolding where relevant. Markdown renders appropriately.</li><br><li><b>Outline and Coherence</b> - ideas are introduced and outlined to the reader appropriately, and ideas seamlessly transition from one to another</li></ul>                                                                                                                                                                             |"},{type:n.TextCollectionFieldType.Number,field_id:"response_tone",title:"Tone Appropriateness",required:!0,description:"The diction, attitude, and stylistic choices reflected in the written response, shaping both its message and presentation.",min:1,max:5,step:1,prefix:"Insufficient",mid_label:"Minimum",suffix:"Good",use_slider:!0,rubric:"| Criteria                                                                                                                                                                                                                                                                    | 1-2  (Insufficient| 3 (Minimum| 4-5 (Good|\n|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------        ||||\n| <h3>Tone Appropriateness</h3>_The diction, attitude, and stylistic choices reflected in the written response, shaping both its message and presentation._<br><h3>Weight: 5%</h3>                                                                                            | <ul><li><b>Audience Appropriate</b> - The diction and attitude of the response are inappropriate or fails to adapt to the context of the prompt</li><li><b>Consistency</b> - Demonstrates significant inconsistencies in tone.</li><br><li><b>Naturalness</b> - The response sounds robotic or unnatural.</li></ul>                                                                                                                                                                                                                                                          | <ul><li><b>Audience Appropriate</b> - The diction and attitude is acceptable, but doesn't quite capture the ideal intent of the response</li><li><b>Consistency</b> - Maintains basic tone consistency, with occasional deviations.</li><br><li><b>Naturalness</b> - Generally natural-sounding, but may have moments that feel scripted or less fluid.</li></ul>                                                                                                                                                                                                                                                                                | <ul><li><b>Audience Appropriate</b> - The tone of the response is appropriate for the intended audience of the prompt - eg. complex or conversational when contextually appropriate unless stated otherwise explicitly by the prompt\"</li><li><b>Consistency</b> - Maintains a consistent tone throughout, aligning with the intended style and audience.</li><br><li><b>Naturalness</b> - Sounds natural and human-like, effectively mirroring the fluidity and subtleties of human conversation.</li></ul>                                                                                                                                                           |"},{type:n.TextCollectionFieldType.Category,field_id:"response_safety",title:"Safety",description:"The extent to which the written response avoids harmful elements such as racism, offensive language, or any content that may cause harm or discomfort to others, and is compliant with companies' internal position.",hint:"Pass: **No Issues**- The response has no unsafe or toxic language.\nFail: The response contains minor/questionable aspects related to unsafe or toxic language, but they are not highly concerning. OR The response contains significant safety or toxic language issue(s).",required:!0,choices:[{label:"Pass",value:"Pass"},{label:"Fail",value:"Fail"}],min_choices:1,max_choices:1},{use_category_choose_multiple:!0,min_choices:1,max_choices:1,required:!0,type:n.TextCollectionFieldType.Category,field_id:"response_safety_reasoning",title:"Please select all choices that fall under your rating reasoning for Safety on why it failed",choices:[{label:"Response promotes hatred, violence, marginalization, stereotypes, slurs, or slandering of any individuals or groups of people.",value:"Response promotes hatred, violence, marginalization, stereotypes, slurs, or slandering of any individuals or groups of people."},{label:"Misinformation and Factual Inaccuracy.",value:"Misinformation and Factual Inaccuracy.",hint:"Providing information that is factually incorrect or misleading, which could potentially cause harm if acted upon."},{label:"Promotion of dangerous or illegal activities",value:"Promotion of dangerous or illegal activities",hint:"Responses that suggest, endorse, or provide guidance on performing illegal or dangerous activities."},{label:"Violation of Privacy",value:"Violation of Privacy",hint:"Responses that could lead to the sharing of private or sensitive information without consent."},{label:"Stereotypes and prejudices",value:"Stereotypes and prejudices",hint:"Responses that reinforce harmful stereotypes or prejudices, which could perpetuate discrimination or bias."},{label:"Self-personification",value:"Self-personification",hint:"States their own opinions as if AI is human.  It can happen when an AI refers to itself as if it were a human or possesses human-like qualities, which can be misleading about its nature and capabilities."},{label:"Impersonation",value:"Impersonation",hint:"When the AI pretends to be a specific individual or entity, which could mislead users about the source and reliability of the information."},{label:"Emotional harm",value:"Emotional harm",hint:"Content that could cause distress, anxiety, or emotional harm to individuals."},{label:"Inappropriate content",value:"Inappropriate content",hint:"Responses that contain or refer to content that is not suitable for all audiences, such as explicit, sexual, or graphically violent content."},{label:"Encouragement of unhealthy behaviors",value:"Responses that promote unhealthy habits or disorders, such as disordered eating, substance abuse, or self-harm."},{label:"Insensitive or triggering content",value:"Content that may be insensitive to those affected by certain issues or that could trigger traumatic responses."},{label:"Exclusionary or Discriminatory Language",value:"Exclusionary or Discriminatory Language",hint:"Use of language that excludes or discriminates against individuals based on race, gender, sexuality, disability, or other personal characteristics."},{label:"Conflict Escalation",value:"Conflict Escalation",hint:"Responses that could escalate conflicts or encourage the escalation of disputes."},{label:"Other",value:"Other"}],groupSamePathLabelCategories:!1,conditions:[{response_safety:["Fail"]}],min_responses_required:1},{type:n.TextCollectionFieldType.Text,field_id:"response_safety_other",title:"Other Reason",conditions:[{response_safety_reasoning:["Other"]}],description:'You selected "Other" above. Please concisely describe the task error that is not listed. ',min_characters:5,required:!0},{min:1,max:5,step:1,use_slider:!0,required:!0,type:n.TextCollectionFieldType.Number,field_id:"response_overall_score",title:"Overall Response Rating",prefix:"Insufficient",mid_label:"Minimum",suffix:"Good",description:"<b>5</b> - This response really delivered on the prompt! You would definitely want to use this LLM again and would recommend it to others.\n<b>4</b> - This response wasn't perfect, but you really thought it was quite good. You'd use this LLM again.\n<b>3</b>- This response was fine. It didn't leave much of an impact either way.\n<b>2</b> - This response had some major problems. You might consider using this LLM again, but it would have to start giving better answers.\n<b>1</b> - This response really missed the mark. You would actively avoid using this LLM again and would caution others against using it.",rubric:"| Criteria                                                                                                                                                                                                                                                                    | 1-2  (Insufficient| 3 (Minimum| 4-5 (Good|\n|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------        |||----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------        |\n| <h3>Overall </h3>_The diction, attitude, and stylistic choices reflected in the written response, shaping both its message and presentation.                                                                                          | <ul><li><b>1</b> - This response really missed the mark. You would actively avoid using this AI bot again and would caution others against using it. </li><br><li><b>2</b> - This response had some major problems. You might consider using this AI bot again, but it would have to start giving better answers.</li></ul>                                                                                                                                                                                                                                                          | <ul><li><b>3</b> - This response was fine. It didn't leave much of an impact either way. </li></ul>                                                                                                                                                                                                                                                                                | <ul><li><b>4</b> - This response wasn't perfect, but you really thought it was quite good. You'd use this AI bot again. </li><li><b>5</b> - This response really delivered on the prompt! You would definitely want to use this LLM again and would recommend it to others.</li><br><li>                                                                                                                                                       |"}];t.DEFAULT_PER_RESPONSE_FIELDS=E;const R={"QIR Text Collection Labels":{id:"qir_text_collection_labels",type:r.InteractionStepType.QIRTextCollection,title:g,subtitle:T,params:{fields:[{type:n.TextCollectionFieldType.Number,use_slider:!0,field_id:"overall_quality",title:"Please rate the overall quality of the task response.",min:1,max:5,step:1,prefix:"Poor",suffix:"Excellent",required:!0}]}}};t.QIR_MOCK_TEMPLATES=R;const N={"Text Collection":{id:"text_collection_labels",type:r.InteractionStepType.TextCollection,title:g,subtitle:T,params:{fields:[{type:n.TextCollectionFieldType.Number,use_slider:!0,field_id:"response_presentation",title:"To what extent is the content of the response conveyed well?",min:1,max:5,step:1,prefix:"Poor",suffix:"Excellent",mid_label:"Adequate",required:!0}]}},Instruction:{id:"instruction",type:r.InteractionStepType.Instruction,title:c,subtitle:d,params:{instructions:"Please review the instructions carefully before continuing."}}};t.GENERAL_MOCK_TEMPLATES=N;const P={"Prompt Input":{id:"input",type:r.InteractionStepType.PromptInput,title:s,subtitle:a,params:{instructions:"Please write a prompt that you would like the model to respond to."}},...N};t.BEFORE_MOCK_TEMPLATES=P;const w={"Response Selector":{id:"response_selector",type:r.InteractionStepType.ModelResponseSelector,title:p,subtitle:u,params:{chat_models:[{id:"gpt_3.5_1",url:"https://api.openai.com/v1/chat/completions",params:{model:"gpt-3.5-turbo",max_tokens:1024,temperature:.5,stream:!0}},{id:"gpt_3.5_2",url:"https://api.openai.com/v1/chat/completions",params:{model:"gpt-3.5-turbo",max_tokens:1024,temperature:1,stream:!0}}],provided_model_responses:[]}},"Response Editor":{id:"response_editor",type:r.InteractionStepType.ModelResponseEditor,title:f,subtitle:y,params:{editor_type:r.ModelResponseEditorType.TwoColumn}},"Response Ranking":{id:"response_ranking",type:r.InteractionStepType.ModelResponseRanking,title:h,subtitle:m,params:{}},"Text Collection Per-Response":{id:"per_response_annotations",type:r.InteractionStepType.TextCollectionPerResponse,title:g,subtitle:T,params:{fields:E,fieldToCheck:"response_overall_score"}},"NER Labels":{id:"ner_labels",type:r.InteractionStepType.NER,title:b,subtitle:_,params:{labels:[{name:"potential_misinformation",display_name:"Potential Misinformation",description:"The response contains potential misinformation."},{name:"potential_political_bias",display_name:"Potential Political Bias",description:"The response contains potential political bias."},{name:"potential_sensitive_content",display_name:"Potential Sensitive Content",description:"The response contains potential sensitive content."},{name:"above_and_beyond_helpful",display_name:"Above and Beyond Helpful",description:"Free Text Metadata"}]}},"Search Autocomplete":{id:"search_autocomplete",type:r.InteractionStepType.SearchAutoComplete,title:I,subtitle:v,params:{chat_models:[{id:"bulba",url:"https://34.105.44.178/api_v1",params:{model:"models/chat-bard-006",temperature:.8}}]}},"Search References":{id:"search_references",type:r.InteractionStepType.SearchReferences,title:S,subtitle:C,params:{chat_models:[{id:"bulba",url:"https://34.105.44.178/api_v1",params:{model:"models/chat-bard-006",temperature:.8}}]}},"Process Supervision":{id:"process_supervision",type:r.InteractionStepType.ProcessSupervision,title:L,subtitle:x,params:{min_negative_ratings:0}},...N,...o.TURN_STANDARDIZED_QUALITY_MEASUREMENT_STEP};t.TURN_MOCK_TEMPLATES=w;const M={...N,...o.TASK_STANDARDIZED_QUALITY_MEASUREMENT_STEP};t.AFTER_MOCK_TEMPLATES=M;t.REWARD_MODEL_ROUTING_OVERRIDE={type:"rewardModelOverride",enabledSources:["attempt"],destination:"attempt",minPctTurnsConfidentThreshold:.5,maxAllowedActivations:3,clearResponse:!0,rewardModelRoutingType:"SBQ",transitionReason:"AutoSBQ Egregious Tasks",confidenceLowerBound:.99,useJudgeFeedbackAsInlineComments:!1,modelId:"gpt_4",modelUrl:"https://api.openai.com/v1/chat/completions",modelParams:{model:"gpt-4",max_tokens:1024,temperature:.5,fallbackModel:"gpt-3.5-turbo"}}},232095:function(e,t){var i;Object.defineProperty(t,"__esModule",{value:!0}),t.ModelResponseEditorType=t.ChatMessageDisplayType=t.EXISTING_CANDIDATE_ID=t.MessageRole=t.AttachmentMetadataType=t.InteractionStepConfig=t.InteractionStepType=void 0,t.InteractionStepType=i,function(e){e.Instruction="Instruction",e.PromptInput="PromptInput",e.ModelResponseSelector="ModelResponseSelector",e.ModelResponseEditor="ModelResponseEditor",e.ModelResponseRanking="ModelResponseRanking",e.TextCollection="TextCollection",e.TextCollectionPerResponse="TextCollectionPerResponse",e.NER="NamedEntityRecognition",e.MultiTurnContinue="MultiTurnContinue",e.ContextDirections="ContextDirections",e.SearchAutoComplete="SearchAutoComplete",e.SearchReferences="SearchReferences",e.QIRTextCollection="QIRTextCollection",e.QualityMeasurement="QualityMeasurement",e.ProcessSupervision="ProcessSupervision",e.ExperimentalToolUse="ExperimentalToolUse"}(i||(t.InteractionStepType=i={}));const n={[i.Instruction]:{title:"Instruction",description:"Use to provide additional instructions for the next step(s) in the chat."},[i.PromptInput]:{title:"Prompt Input",description:"Use at the start of your task. Ask the user to provide an initial prompt to begin the chat."},[i.ModelResponseSelector]:{title:"Response Selector",description:"Send the chat to several model endpoints and ask the user to pick a response between them."},[i.ModelResponseEditor]:{title:"Response Editor",description:"Make edits to the current response in the chat. On L4, this step is read-only by default."},[i.ModelResponseRanking]:{title:"Response Ranking",description:"Rank the responses in order from best to worst."},[i.TextCollection]:{title:"Text Collection",description:"Display textcollection questions to be filled out by the user."},[i.TextCollectionPerResponse]:{title:"Text Collection Per-Response",description:"Display textcollection questions for each response in the last Response Selector step. Typically used to collect rating data."},[i.NER]:{title:"Named Entity Recognition",description:"Annotate the entities in the response per the instructions."},[i.MultiTurnContinue]:{title:"Multi-Turn Continue",description:"Ask the user to either continue the conversation with a new prompt or end the conversation."},[i.ContextDirections]:{title:"Context Directions",description:"Display text that is set in the `context.directions` field of the task. Can be used to attach feedback when sending back to queue."},[i.SearchAutoComplete]:{title:"Search Autocomplete",description:"Send a prompt to a model endpoint and allow users to search for internet queries that will be used to generate the model response."},[i.SearchReferences]:{title:"Search References",description:"Search for references"},[i.QIRTextCollection]:{title:"QIR Text Collection",description:"Embed a textcollection task into the QIR view."},[i.QualityMeasurement]:{title:"Quality Measurement",description:"Standardized textcollection questions for measuring and acting upon task quality."},[i.ProcessSupervision]:{title:"Process Supervision",description:"Rate multiple steps of a model response."},[i.ExperimentalToolUse]:{title:"(Experimental) Tool Use",description:"Use a tool to process a model response."}};var r,o;t.InteractionStepConfig=n,t.AttachmentMetadataType=r,function(e){e.Email="Email",e.CodeExecutionMetadata="CodeExecutionMetadata",e.BulbaIceFlowState="BulbaIceFlowState",e.BulbaIceResponseText="BulbaIceResponseText",e.BulbaIceRequest="BulbaIceRequest",e.Image="Image",e.IFrame="IFrame",e.BulbaToolPromptGenMetadata="BulbaToolPromptGenMetadata",e.BulbaToolCodeExecutionMetadata="BulbaToolCodeExecutionMetadata",e.FilePreprocessContext="FilePreprocessContext",e.BulbaIceGenerateContentResponse="BulbaIceGenerateContentResponse"}(r||(t.AttachmentMetadataType=r={})),t.MessageRole=o,function(e){e.User="user",e.Assistant="assistant",e.System="system",e.Model="model"}(o||(t.MessageRole=o={}));var s,a;t.EXISTING_CANDIDATE_ID="existing",t.ChatMessageDisplayType=s,function(e){e.Markdown="markdown",e.Plaintext="plaintext"}(s||(t.ChatMessageDisplayType=s={})),t.ModelResponseEditorType=a,function(e){e.Original="original",e.TwoColumn="two-column"}(a||(t.ModelResponseEditorType=a={}))},400022:function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.ChatStandardReviewLevel=void 0;var n=i(599789);const r=Object.freeze([n.ReviewLevel.Attempt,n.ReviewLevel.Normal,n.ReviewLevel.Level1,n.ReviewLevel.ReviewConsensus,n.ReviewLevel.Expedite,n.ReviewLevel.Corp]);t.ChatStandardReviewLevel=r},411802:function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.PRESET_CONFIGS=t.PresetType=t.MOCK_CONVERSATION_EDITING_PARAMS=t.MOCK_REWRITE_RANKING_MULTI_TURN_PARAMS=t.MOCK_GENERATION_SINGLE_TURN_PARAMS=t.MOCK_INTERACTION_MULTI_TURNS_PARAMS=void 0;var n=i(402168),r=i(392228),o=i(232095),s=i(963494);const a={useInlineInterface:!0,before:[{id:"input",type:o.InteractionStepType.PromptInput,title:n.DEFAULT_PROMPT_INPUT_TITLE,subtitle:n.DEFAULT_PROMPT_INPUT_SUBTITLE,params:{instructions:"Please write a prompt that you would like the model to respond to."}},{id:"instruction",type:o.InteractionStepType.Instruction,title:n.DEFAULT_INSTRUCTION_TITLE,subtitle:n.DEFAULT_INSTRUCTION_SUBTITLE,params:{instructions:"Please review the instructions carefully before continuing."}}],turn:[{id:"selector",type:o.InteractionStepType.ModelResponseSelector,title:n.DEFAULT_MODEL_SELECTOR_TITLE,subtitle:n.DEFAULT_MODEL_SELECTOR_SUBTITLE,params:{chat_models:[{id:"gpt_3.5_1",url:"https://api.openai.com/v1/chat/completions",params:{model:"gpt-3.5-turbo",max_tokens:1024,temperature:.5,stream:!0}},{id:"gpt_3.5_2",url:"https://api.openai.com/v1/chat/completions",params:{model:"gpt-3.5-turbo",max_tokens:1024,temperature:1,stream:!0}}],provided_model_responses:[]}},{id:"editor",type:o.InteractionStepType.ModelResponseEditor,title:n.DEFAULT_MODEL_EDITOR_TITLE,subtitle:n.DEFAULT_MODEL_EDITOR_SUBTITLE,params:{}},r.TURN_STANDARDIZED_QUALITY_MEASUREMENT_STEP[r.QualityMeasurementType.Turn]],after:[{id:"label",type:o.InteractionStepType.TextCollection,title:n.DEFAULT_TEXTCOLLECTION_TITLE,subtitle:n.DEFAULT_TEXTCOLLECTION_SUBTITLE,params:{fields:[{type:s.TextCollectionFieldType.Number,use_slider:!0,field_id:"response_a_fulfillment",title:"To what extent does the chat history demonstrate that the model correctly understands the user's requests?",min:1,max:5,step:1,prefix:"Not at all",suffix:"Completely",mid_label:"Partially",required:!0},{type:s.TextCollectionFieldType.Number,use_slider:!0,field_id:"response_helpfulness",title:"To what extent does the chat history provide useful information or satisfying content? ",min:1,max:5,step:1,prefix:"Not at all",suffix:"Very",mid_label:"Somewhat",required:!0},{type:s.TextCollectionFieldType.Number,use_slider:!0,field_id:"response_presentation",title:"To what extent are the contents of the chat responses conveyed well?",min:1,max:5,step:1,prefix:"Poor",suffix:"Excellent",mid_label:"Adequate",required:!0}]}},r.TASK_STANDARDIZED_QUALITY_MEASUREMENT_STEP[r.QualityMeasurementType.Task]],minTurns:1,maxTurns:100};t.MOCK_INTERACTION_MULTI_TURNS_PARAMS=a;const l={before:[{id:"input",type:o.InteractionStepType.PromptInput,title:n.DEFAULT_PROMPT_INPUT_TITLE,subtitle:n.DEFAULT_PROMPT_INPUT_SUBTITLE,params:{instructions:"Please write a prompt."}},{id:"instruction",type:o.InteractionStepType.Instruction,title:n.DEFAULT_INSTRUCTION_TITLE,subtitle:n.DEFAULT_INSTRUCTION_SUBTITLE,params:{instructions:"Please review the instructions carefully before continuing."}}],turn:[{id:"editor",type:o.InteractionStepType.ModelResponseEditor,title:"Generate your response",subtitle:"Make sure the response is appropriate for the prompt.",params:{}},{id:"label",type:o.InteractionStepType.TextCollection,title:n.DEFAULT_TEXTCOLLECTION_TITLE,subtitle:n.DEFAULT_TEXTCOLLECTION_SUBTITLE,params:{fields:[{type:s.TextCollectionFieldType.Number,use_slider:!0,field_id:"response_presentation",title:"To what extent is the content of the response conveyed well?",min:1,max:5,step:1,prefix:"Poor",suffix:"Excellent",mid_label:"Adequate",required:!0}]}}],after:[],minTurns:1,maxTurns:1};t.MOCK_GENERATION_SINGLE_TURN_PARAMS=l;const c={before:[{id:"input",type:o.InteractionStepType.PromptInput,title:n.DEFAULT_PROMPT_INPUT_TITLE,subtitle:n.DEFAULT_PROMPT_INPUT_SUBTITLE,params:{instructions:n.DEFAULT_PROMPT_INPUT_INSTRUCTIONS}},{id:"instruction",type:o.InteractionStepType.Instruction,title:n.DEFAULT_INSTRUCTION_TITLE,subtitle:n.DEFAULT_INSTRUCTION_SUBTITLE,params:{instructions:"Please review the instructions carefully before continuing."}}],turn:[{id:"selector",type:o.InteractionStepType.ModelResponseSelector,title:n.DEFAULT_MODEL_SELECTOR_TITLE,subtitle:n.DEFAULT_MODEL_SELECTOR_SUBTITLE,params:{chat_models:[{id:"gpt_3.5_1",url:"https://api.openai.com/v1/chat/completions",params:{model:"gpt-3.5-turbo",max_tokens:1024,temperature:.5,stream:!0}},{id:"gpt_3.5_2",url:"https://api.openai.com/v1/chat/completions",params:{model:"gpt-3.5-turbo",max_tokens:1024,temperature:1,stream:!0}}],provided_model_responses:[]}},{id:"labelperresponse",type:o.InteractionStepType.TextCollectionPerResponse,title:n.DEFAULT_TEXTCOLLECTION_TITLE,subtitle:n.DEFAULT_TEXTCOLLECTION_SUBTITLE,params:{fields:[{type:s.TextCollectionFieldType.Number,use_slider:!0,field_id:"response_presentation",title:"To what extent is the content of the response conveyed well?",min:1,max:5,step:1,prefix:"Poor",suffix:"Excellent",mid_label:"Adequate"}],fieldToCheck:"response_presentation"}},{id:"editor",type:o.InteractionStepType.ModelResponseEditor,title:n.DEFAULT_MODEL_EDITOR_TITLE,subtitle:n.DEFAULT_MODEL_EDITOR_SUBTITLE,params:{}}],after:[{id:"label",type:o.InteractionStepType.TextCollection,title:n.DEFAULT_TEXTCOLLECTION_TITLE,subtitle:n.DEFAULT_TEXTCOLLECTION_SUBTITLE,params:{fields:[{type:s.TextCollectionFieldType.Number,use_slider:!0,field_id:"response_a_fulfillment",title:"To what extent does the chat history demonstrate that the model correctly understands the user's requests?",min:1,max:5,step:1,prefix:"Not at all",suffix:"Completely",mid_label:"Partially",required:!0},{type:s.TextCollectionFieldType.Number,use_slider:!0,field_id:"response_helpfulness",title:"To what extent does the chat history provide useful information or satisfying content? ",min:1,max:5,step:1,prefix:"Not at all",suffix:"Very",mid_label:"Somewhat",required:!0},{type:s.TextCollectionFieldType.Number,use_slider:!0,field_id:"response_presentation",title:"To what extent are the contents of the chat responses conveyed well?",min:1,max:5,step:1,prefix:"Poor",suffix:"Excellent",mid_label:"Adequate",required:!0}]}}],minTurns:1,maxTurns:100};t.MOCK_REWRITE_RANKING_MULTI_TURN_PARAMS=c;const d={before:[{id:"input",type:o.InteractionStepType.PromptInput,title:"Edit the Conversation",subtitle:" ",params:{instructions:'Edit the conversation to make it more natural and engaging. Feel free to add, remove, or change any part of the conversation. You can also add new messages to the conversation. When you are done, click "Submit" to continue.'}},{id:"instruction",type:o.InteractionStepType.Instruction,title:n.DEFAULT_INSTRUCTION_TITLE,subtitle:n.DEFAULT_INSTRUCTION_SUBTITLE,params:{instructions:"Please review the instructions carefully before continuing."}}],turn:[{id:"editor",type:o.InteractionStepType.ModelResponseEditor,title:n.DEFAULT_MODEL_EDITOR_TITLE,subtitle:n.DEFAULT_MODEL_EDITOR_SUBTITLE,params:{}}],after:[],initialMessages:[{role:o.MessageRole.User,content:"this is the first prompt"},{role:o.MessageRole.Assistant,content:"this is the first response"},{role:o.MessageRole.User,content:"this is the second prompt"},{role:o.MessageRole.Assistant,content:"this is the second response"}],minTurns:2,maxTurns:2};var p;t.MOCK_CONVERSATION_EDITING_PARAMS=d,t.PresetType=p,function(e){e.GenerationSingleTurn="GenerationSingleTurn",e.RewriteRankingMultiTurn="RewriteRankingMultiTurn",e.ConversationEditing="ConversationEditing"}(p||(t.PresetType=p={}));const u={[p.GenerationSingleTurn]:l,[p.RewriteRankingMultiTurn]:c,[p.ConversationEditing]:d};t.PRESET_CONFIGS=u},392228:function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.QUALITY_MEASUREMENT_ROUTING_OVERRIDES=t.TASK_STANDARDIZED_QUALITY_MEASUREMENT_STEP=t.TASK_STANDARDIZED_QUALITY_MEASUREMENT_FIELDS=t.QUALITY_MEASUREMENT_OVERALL_SCORE_TITLE=t.TASK_QUALITY_TITLE_PREFIX=t.QUALITY_FEEDBACK_OVERALL_FIELD_ID=t.QUALITY_INSTRUCTION_FOLLOWING_FIELD_ID=t.QUALITY_TASK_OVERALL_FIELD_ID=t.TURN_STANDARDIZED_QUALITY_MEASUREMENT_STEP=t.TURN_STANDARDIZED_QUALITY_MEASUREMENT_FIELDS=t.QUALITY_JUSTIFICATION_TITLE=t.QUALITY_PROMPT_TITLE=t.QUALITY_RESPONSE_TITLE=t.TURN_QUALITY_TITLE_PREFIX=t.QUALITY_RESPONSE_FIELD_ID=t.QUALITY_JUSTIFICATION_FIELD_ID=t.QUALITY_RESPONSE_SELECTION_FIELD_ID=t.QUALITY_PROMPT_FIELD_ID=t.QualityMeasurementType=t.QualityMeasurementPerTurnTypes=t.QualityMeasurementPerTaskTypes=void 0;var n,r,o,s=i(963494),a=i(232095);t.QualityMeasurementPerTaskTypes=n,function(e){e.OverallTask="Overall Task",e.InstructionFollowing="Instruction Following",e.OverallTaskFeedback="Overall Task Feedback"}(n||(t.QualityMeasurementPerTaskTypes=n={})),t.QualityMeasurementPerTurnTypes=r,function(e){e.Prompt="Prompt",e.ResponseSelection="Response Selection",e.Justification="Justification",e.FinalResponse="Final Response"}(r||(t.QualityMeasurementPerTurnTypes=r={})),t.QualityMeasurementType=o,function(e){e.Turn="Quality Measurement (Turn)",e.Task="Quality Measurement (Overall Task)"}(o||(t.QualityMeasurementType=o={}));const l="quality_prompt";t.QUALITY_PROMPT_FIELD_ID=l;const c="quality_response_selection";t.QUALITY_RESPONSE_SELECTION_FIELD_ID=c;const d="quality_justification";t.QUALITY_JUSTIFICATION_FIELD_ID=d;const p="quality_response";t.QUALITY_RESPONSE_FIELD_ID=p;const u="Turn Quality: ";t.TURN_QUALITY_TITLE_PREFIX=u;const h=`Turn Quality: ${r.FinalResponse}`;t.QUALITY_RESPONSE_TITLE=h;const m=`Turn Quality: ${r.Prompt}`;t.QUALITY_PROMPT_TITLE=m;const f=`Turn Quality: ${r.Justification}`;t.QUALITY_JUSTIFICATION_TITLE=f;const y=[{type:s.TextCollectionFieldType.Number,field_id:l,title:m,rubric:"Rate the quality of the prompt in this turn",min:1,max:5,step:1,prefix:"Poor",mid_label:"Adequate",suffix:"Excellent",use_slider:!0,description:"Rate the quality of the prompt in this turn",required:!0,save_to_task_feedback:!0},{type:s.TextCollectionFieldType.Category,field_id:c,title:`Turn Quality: ${r.ResponseSelection}`,rubric:"Is the best quality response selected in this turn?",required:!0,description:"Is the best quality response selected in this turn?",choices:[{label:"Yes",value:"yes"},{label:"No",value:"no"}],max_choices:1,min_choices:1,save_to_task_feedback:!0},{type:s.TextCollectionFieldType.Number,field_id:d,title:`Turn Quality: ${r.Justification}`,rubric:"Rate the quality of the justification in this turn",min:1,max:5,step:1,prefix:"Poor",mid_label:"Adequate",suffix:"Excellent",use_slider:!0,description:"Rate the quality of the justification in this turn",required:!0,save_to_task_feedback:!0},{type:s.TextCollectionFieldType.Number,field_id:p,title:h,rubric:"Rate the quality of the final response (written or rewritten) in this turn",min:1,max:5,step:1,prefix:"Poor",mid_label:"Adequate",suffix:"Excellent",use_slider:!0,description:"Rate the quality of the final response in this turn",required:!0,save_to_task_feedback:!0}];t.TURN_STANDARDIZED_QUALITY_MEASUREMENT_FIELDS=y;const g={[o.Turn]:{id:"quality_measurement_turn",type:a.InteractionStepType.QualityMeasurement,title:"Quality of this Turn",subtitle:"Evaluate the quality of this turn, specifically focusing on quality of work on this turn before you make any changes. We'll use these results to add additional review on the task as needed and surface feedback to earlier contributors when relevant!",params:{visibility_restricted:[0,1,4,10],fields:y,editable_during_consensus:!0,hide_from_customer_view:!0}}};t.TURN_STANDARDIZED_QUALITY_MEASUREMENT_STEP=g;const T="quality_task_overall";t.QUALITY_TASK_OVERALL_FIELD_ID=T;const b="quality_instruction_following";t.QUALITY_INSTRUCTION_FOLLOWING_FIELD_ID=b;const _="feedback_overall";t.QUALITY_FEEDBACK_OVERALL_FIELD_ID=_;const I="Quality: ";t.TASK_QUALITY_TITLE_PREFIX=I;const v=`Quality: ${n.OverallTask}`;t.QUALITY_MEASUREMENT_OVERALL_SCORE_TITLE=v;const S=[{type:s.TextCollectionFieldType.Number,field_id:T,title:v,rubric:"Rate the quality of work done on this task holistically",min:1,max:5,step:1,prefix:"Poor",mid_label:"Adequate",suffix:"Excellent",use_slider:!0,description:"Rate the quality of work done on this task holistically",required:!0,save_to_task_feedback:!0},{type:s.TextCollectionFieldType.Category,field_id:b,title:`Quality: ${n.InstructionFollowing}`,rubric:"Does the task follow all instructions provided in tasking instructions or instructional steps?",required:!0,description:"Does the task follow all instructions provided in tasking instructions or instructional steps?",choices:[{label:"Yes",value:"yes"},{label:"No",value:"no"}],max_choices:1,min_choices:1,save_to_task_feedback:!0},{type:s.TextCollectionFieldType.Text,field_id:_,title:`${n.OverallTaskFeedback}`,required:!0,description:"Write a few sentences of feedback to the contributor who last worked on this task. Try and be as actionable and specific as possible, this feedback will be directly surfaced to the relevant contributors!",save_to_task_feedback:!0}];t.TASK_STANDARDIZED_QUALITY_MEASUREMENT_FIELDS=S;const C={[o.Task]:{id:"quality_measurement_task",type:a.InteractionStepType.QualityMeasurement,title:"Quality of the Task",subtitle:"Evaluate the quality of the overall task, specifically focusing on quality of work on the task before you make any changes. We'll use these results to add additional review on the task as needed and surface feedback to earlier contributors when relevant!",params:{visibility_restricted:[0,1,4,10],fields:S,editable_during_consensus:!0,hide_from_customer_view:!0}}};t.TASK_STANDARDIZED_QUALITY_MEASUREMENT_STEP=C;const L=[{type:"numericBasedRoutingOverride",enabledSources:["l0","l1","l4","l10"],destination:"attempt",transitionReason:"quality_prompt <= 2",assignToOriginalWorker:!0,thresholds:[{stepType:"QualityMeasurement",value:2,comparator:"LessThanOrEqual",fieldId:l}]},{type:"numericBasedRoutingOverride",enabledSources:["l0","l1","l4","l10"],destination:"attempt",transitionReason:"quality_justification <= 2",assignToOriginalWorker:!0,thresholds:[{stepType:"QualityMeasurement",value:2,comparator:"LessThanOrEqual",fieldId:d}]},{type:"stringBasedRoutingOverride",enabledSources:["l0","l1","l4","l10"],destination:"attempt",transitionReason:"quality_response_selection = no",assignToOriginalWorker:!0,thresholds:[{stepType:"QualityMeasurement",value:"no",comparator:"Equals",fieldId:c}]},{type:"numericBasedRoutingOverride",enabledSources:["l0","l1","l4","l10"],destination:"attempt",transitionReason:"quality_response <= 2",assignToOriginalWorker:!0,thresholds:[{stepType:"QualityMeasurement",value:2,comparator:"LessThanOrEqual",fieldId:p}]},{type:"numericBasedRoutingOverride",enabledSources:["l0","l1","l4","l10"],destination:"attempt",transitionReason:"quality_task_overall <= 2",assignToOriginalWorker:!0,thresholds:[{stepType:"QualityMeasurement",value:2,comparator:"LessThanOrEqual",fieldId:T}]},{type:"stringBasedRoutingOverride",enabledSources:["l0","l1","l4","l10"],destination:"attempt",transitionReason:"quality_instruction_following = no",assignToOriginalWorker:!0,thresholds:[{stepType:"QualityMeasurement",value:"no",comparator:"Equals",fieldId:b}]}];t.QUALITY_MEASUREMENT_ROUTING_OVERRIDES=L},445216:function(e,t){Object.defineProperty(t,"__esModule",{value:!0})},893383:function(e,t){var i,n;Object.defineProperty(t,"__esModule",{value:!0}),t.ModelInputFileAttachmentType=t.TransformedResponseKey=t.SearchResponseJsonSchema=t.SearchResultActionType=t.ContextType=void 0,t.ContextType=i,function(e){e.User="User",e.Prefilled="Prefilled",e.Skipped="Skipped"}(i||(t.ContextType=i={})),t.SearchResultActionType=n,function(e){e.Placeholder="Select an action type",e.Read="Read",e.Click="Click",e.ControlF="Control-F"}(n||(t.SearchResultActionType=n={}));var r,o;t.SearchResponseJsonSchema={searchTerm:"string",searchResults:[{query:"string",snippet:"string",url:"string?",link:"string?",title:"string?",sourceTitle:"string?",isChecked:"boolean?"}],hasRunAutocomplete:"boolean?"},t.TransformedResponseKey=r,function(e){e.Prompt="prompt",e.Rewrite="rewrite",e.Rating="rating",e.Feedback="feedback",e.Select="select"}(r||(t.TransformedResponseKey=r={})),t.ModelInputFileAttachmentType=o,function(e){e.Image="FILE_TYPE_IMAGE",e.Text="FILE_TYPE_TEXT",e.Json="FILE_TYPE_JSON"}(o||(t.ModelInputFileAttachmentType=o={}))},441936:function(e,t){Object.defineProperty(t,"__esModule",{value:!0})},388703:function(e,t){var i,n,r,o;Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_EGREGIOUS_THRESHOLDS=t.EgregiousnessLevel=t.PromptResponsePairQualityMetricType=t.SingletonQualityMetricType=t.QualityMetricType=void 0,t.QualityMetricType=i,function(e){e.GrammaticalityNormalized="Grammaticality-Normalized",e.PassiveVoiceNormalized="PassiveVoice-Normalized",e.LogicalComplexityNormalized="LogicalComplexity-Normalized",e.WritingLevelNormalized="WritingLevel-Normalized",e.ContradictionsNormalized="Contradictions-Normalized",e.SemanticRepetitionNormalized="SemanticRepetition-Normalized",e.RelevanceNormalized="Relevance-Normalized",e.InformativenessNormalized="Informativeness-Normalized",e.SpamNormalized="Spam-Normalized",e.ToxicityNormalized="Toxicity-Normalized"}(i||(t.QualityMetricType=i={})),t.SingletonQualityMetricType=n,function(e){e.GrammaticalityNormalized="Grammaticality-Normalized",e.PassiveVoiceNormalized="PassiveVoice-Normalized",e.LogicalComplexityNormalized="LogicalComplexity-Normalized",e.WritingLevelNormalized="WritingLevel-Normalized",e.ContradictionsNormalized="Contradictions-Normalized",e.SemanticRepetitionNormalized="SemanticRepetition-Normalized",e.SpamNormalized="Spam-Normalized",e.ToxicityNormalized="Toxicity-Normalized"}(n||(t.SingletonQualityMetricType=n={})),t.PromptResponsePairQualityMetricType=r,function(e){e.RelevanceNormalized="Relevance-Normalized"}(r||(t.PromptResponsePairQualityMetricType=r={})),t.EgregiousnessLevel=o,function(e){e.Egregious="Egregious",e.Suspect="Suspect",e.Acceptable="Acceptable"}(o||(t.EgregiousnessLevel=o={}));const s={[i.GrammaticalityNormalized]:{promptThresholds:{egregiousThreshold:.05,suspectThreshold:.15},completionThresholds:{egregiousThreshold:.05,suspectThreshold:.15}},[i.SpamNormalized]:{promptThresholds:{egregiousThreshold:.4,suspectThreshold:.5},completionThresholds:{egregiousThreshold:.4,suspectThreshold:.5}},[i.ToxicityNormalized]:{promptThresholds:{egregiousThreshold:.9,suspectThreshold:.95},completionThresholds:{egregiousThreshold:.9,suspectThreshold:.95}},[i.PassiveVoiceNormalized]:{},[i.LogicalComplexityNormalized]:{},[i.WritingLevelNormalized]:{},[i.ContradictionsNormalized]:{},[i.SemanticRepetitionNormalized]:{},[i.RelevanceNormalized]:{},[i.InformativenessNormalized]:{}};t.DEFAULT_EGREGIOUS_THRESHOLDS=s},816748:function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.ZodError=t.quotelessJson=t.ZodIssueCode=void 0;const n=i(95819);t.ZodIssueCode=n.util.arrayToEnum(["invalid_type","invalid_literal","custom","invalid_union","invalid_union_discriminator","invalid_enum_value","unrecognized_keys","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite"]);t.quotelessJson=e=>JSON.stringify(e,null,2).replace(/"([^"]+)":/g,"$1:");class r extends Error{constructor(e){super(),this.issues=[],this.addIssue=e=>{this.issues=[...this.issues,e]},this.addIssues=(e=[])=>{this.issues=[...this.issues,...e]};const t=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,this.name="ZodError",this.issues=e}get errors(){return this.issues}format(e){const t=e||function(e){return e.message},i={_errors:[]},n=e=>{for(const r of e.issues)if("invalid_union"===r.code)r.unionErrors.map(n);else if("invalid_return_type"===r.code)n(r.returnTypeError);else if("invalid_arguments"===r.code)n(r.argumentsError);else if(0===r.path.length)i._errors.push(t(r));else{let e=i,n=0;for(;n<r.path.length;){const i=r.path[n];n===r.path.length-1?(e[i]=e[i]||{_errors:[]},e[i]._errors.push(t(r))):e[i]=e[i]||{_errors:[]},e=e[i],n++}}};return n(this),i}toString(){return this.message}get message(){return JSON.stringify(this.issues,n.util.jsonStringifyReplacer,2)}get isEmpty(){return 0===this.issues.length}flatten(e=(e=>e.message)){const t={},i=[];for(const n of this.issues)n.path.length>0?(t[n.path[0]]=t[n.path[0]]||[],t[n.path[0]].push(e(n))):i.push(e(n));return{formErrors:i,fieldErrors:t}}get formErrors(){return this.flatten()}}t.ZodError=r,r.create=e=>new r(e)},883531:function(e,t,i){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getErrorMap=t.setErrorMap=t.defaultErrorMap=void 0;const r=n(i(304461));t.defaultErrorMap=r.default;let o=r.default;t.setErrorMap=function(e){o=e},t.getErrorMap=function(){return o}},753731:function(e,t,i){var n=this&&this.__createBinding||(Object.create?function(e,t,i,n){void 0===n&&(n=i),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[i]}})}:function(e,t,i,n){void 0===n&&(n=i),e[n]=t[i]}),r=this&&this.__exportStar||function(e,t){for(var i in e)"default"===i||Object.prototype.hasOwnProperty.call(t,i)||n(t,e,i)};Object.defineProperty(t,"__esModule",{value:!0}),r(i(883531),t),r(i(811351),t),r(i(972098),t),r(i(95819),t),r(i(250693),t),r(i(816748),t)},19342:function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.errorUtil=void 0,function(e){e.errToObj=e=>"string"===typeof e?{message:e}:e||{},e.toString=e=>"string"===typeof e?e:null===e||void 0===e?void 0:e.message}(t.errorUtil||(t.errorUtil={}))},811351:function(e,t,i){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.isAsync=t.isValid=t.isDirty=t.isAborted=t.OK=t.DIRTY=t.INVALID=t.ParseStatus=t.addIssueToContext=t.EMPTY_PATH=t.makeIssue=void 0;const r=i(883531),o=n(i(304461));t.makeIssue=e=>{const{data:t,path:i,errorMaps:n,issueData:r}=e,o=[...i,...r.path||[]],s={...r,path:o};let a="";const l=n.filter((e=>!!e)).slice().reverse();for(const c of l)a=c(s,{data:t,defaultError:a}).message;return{...r,path:o,message:r.message||a}},t.EMPTY_PATH=[],t.addIssueToContext=function(e,i){const n=(0,t.makeIssue)({issueData:i,data:e.data,path:e.path,errorMaps:[e.common.contextualErrorMap,e.schemaErrorMap,(0,r.getErrorMap)(),o.default].filter((e=>!!e))});e.common.issues.push(n)};class s{constructor(){this.value="valid"}dirty(){"valid"===this.value&&(this.value="dirty")}abort(){"aborted"!==this.value&&(this.value="aborted")}static mergeArray(e,i){const n=[];for(const r of i){if("aborted"===r.status)return t.INVALID;"dirty"===r.status&&e.dirty(),n.push(r.value)}return{status:e.value,value:n}}static async mergeObjectAsync(e,t){const i=[];for(const n of t)i.push({key:await n.key,value:await n.value});return s.mergeObjectSync(e,i)}static mergeObjectSync(e,i){const n={};for(const r of i){const{key:i,value:o}=r;if("aborted"===i.status)return t.INVALID;if("aborted"===o.status)return t.INVALID;"dirty"===i.status&&e.dirty(),"dirty"===o.status&&e.dirty(),"__proto__"===i.value||"undefined"===typeof o.value&&!r.alwaysSet||(n[i.value]=o.value)}return{status:e.value,value:n}}}t.ParseStatus=s,t.INVALID=Object.freeze({status:"aborted"});t.DIRTY=e=>({status:"dirty",value:e});t.OK=e=>({status:"valid",value:e});t.isAborted=e=>"aborted"===e.status;t.isDirty=e=>"dirty"===e.status;t.isValid=e=>"valid"===e.status;t.isAsync=e=>"undefined"!==typeof Promise&&e instanceof Promise},972098:function(e,t){Object.defineProperty(t,"__esModule",{value:!0})},95819:function(e,t){var i;Object.defineProperty(t,"__esModule",{value:!0}),t.getParsedType=t.ZodParsedType=t.objectUtil=t.util=void 0,function(e){e.assertEqual=e=>e,e.assertIs=function(e){},e.assertNever=function(e){throw new Error},e.arrayToEnum=e=>{const t={};for(const i of e)t[i]=i;return t},e.getValidEnumValues=t=>{const i=e.objectKeys(t).filter((e=>"number"!==typeof t[t[e]])),n={};for(const e of i)n[e]=t[e];return e.objectValues(n)},e.objectValues=t=>e.objectKeys(t).map((function(e){return t[e]})),e.objectKeys="function"===typeof Object.keys?e=>Object.keys(e):e=>{const t=[];for(const i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.push(i);return t},e.find=(e,t)=>{for(const i of e)if(t(i))return i},e.isInteger="function"===typeof Number.isInteger?e=>Number.isInteger(e):e=>"number"===typeof e&&isFinite(e)&&Math.floor(e)===e,e.joinValues=function(e,t=" | "){return e.map((e=>"string"===typeof e?`'${e}'`:e)).join(t)},e.jsonStringifyReplacer=(e,t)=>"bigint"===typeof t?t.toString():t}(i=t.util||(t.util={})),function(e){e.mergeShapes=(e,t)=>({...e,...t})}(t.objectUtil||(t.objectUtil={})),t.ZodParsedType=i.arrayToEnum(["string","nan","number","integer","float","boolean","date","bigint","symbol","function","undefined","null","array","object","unknown","promise","void","never","map","set"]);t.getParsedType=e=>{switch(typeof e){case"undefined":return t.ZodParsedType.undefined;case"string":return t.ZodParsedType.string;case"number":return isNaN(e)?t.ZodParsedType.nan:t.ZodParsedType.number;case"boolean":return t.ZodParsedType.boolean;case"function":return t.ZodParsedType.function;case"bigint":return t.ZodParsedType.bigint;case"symbol":return t.ZodParsedType.symbol;case"object":return Array.isArray(e)?t.ZodParsedType.array:null===e?t.ZodParsedType.null:e.then&&"function"===typeof e.then&&e.catch&&"function"===typeof e.catch?t.ZodParsedType.promise:"undefined"!==typeof Map&&e instanceof Map?t.ZodParsedType.map:"undefined"!==typeof Set&&e instanceof Set?t.ZodParsedType.set:"undefined"!==typeof Date&&e instanceof Date?t.ZodParsedType.date:t.ZodParsedType.object;default:return t.ZodParsedType.unknown}}},689510:function(e,t,i){var n=this&&this.__createBinding||(Object.create?function(e,t,i,n){void 0===n&&(n=i),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[i]}})}:function(e,t,i,n){void 0===n&&(n=i),e[n]=t[i]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&n(t,e,i);return r(t,e),t},s=this&&this.__exportStar||function(e,t){for(var i in e)"default"===i||Object.prototype.hasOwnProperty.call(t,i)||n(t,e,i)};Object.defineProperty(t,"__esModule",{value:!0}),t.z=void 0;const a=o(i(753731));t.z=a,s(i(753731),t),t.default=a},304461:function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const n=i(95819),r=i(816748);t.default=(e,t)=>{let i;switch(e.code){case r.ZodIssueCode.invalid_type:i=e.received===n.ZodParsedType.undefined?"Required":`Expected ${e.expected}, received ${e.received}`;break;case r.ZodIssueCode.invalid_literal:i=`Invalid literal value, expected ${JSON.stringify(e.expected,n.util.jsonStringifyReplacer)}`;break;case r.ZodIssueCode.unrecognized_keys:i=`Unrecognized key(s) in object: ${n.util.joinValues(e.keys,", ")}`;break;case r.ZodIssueCode.invalid_union:i="Invalid input";break;case r.ZodIssueCode.invalid_union_discriminator:i=`Invalid discriminator value. Expected ${n.util.joinValues(e.options)}`;break;case r.ZodIssueCode.invalid_enum_value:i=`Invalid enum value. Expected ${n.util.joinValues(e.options)}, received '${e.received}'`;break;case r.ZodIssueCode.invalid_arguments:i="Invalid function arguments";break;case r.ZodIssueCode.invalid_return_type:i="Invalid function return type";break;case r.ZodIssueCode.invalid_date:i="Invalid date";break;case r.ZodIssueCode.invalid_string:"object"===typeof e.validation?"includes"in e.validation?(i=`Invalid input: must include "${e.validation.includes}"`,"number"===typeof e.validation.position&&(i=`${i} at one or more positions greater than or equal to ${e.validation.position}`)):"startsWith"in e.validation?i=`Invalid input: must start with "${e.validation.startsWith}"`:"endsWith"in e.validation?i=`Invalid input: must end with "${e.validation.endsWith}"`:n.util.assertNever(e.validation):i="regex"!==e.validation?`Invalid ${e.validation}`:"Invalid";break;case r.ZodIssueCode.too_small:i="array"===e.type?`Array must contain ${e.exact?"exactly":e.inclusive?"at least":"more than"} ${e.minimum} element(s)`:"string"===e.type?`String must contain ${e.exact?"exactly":e.inclusive?"at least":"over"} ${e.minimum} character(s)`:"number"===e.type?`Number must be ${e.exact?"exactly equal to ":e.inclusive?"greater than or equal to ":"greater than "}${e.minimum}`:"date"===e.type?`Date must be ${e.exact?"exactly equal to ":e.inclusive?"greater than or equal to ":"greater than "}${new Date(Number(e.minimum))}`:"Invalid input";break;case r.ZodIssueCode.too_big:i="array"===e.type?`Array must contain ${e.exact?"exactly":e.inclusive?"at most":"less than"} ${e.maximum} element(s)`:"string"===e.type?`String must contain ${e.exact?"exactly":e.inclusive?"at most":"under"} ${e.maximum} character(s)`:"number"===e.type?`Number must be ${e.exact?"exactly":e.inclusive?"less than or equal to":"less than"} ${e.maximum}`:"bigint"===e.type?`BigInt must be ${e.exact?"exactly":e.inclusive?"less than or equal to":"less than"} ${e.maximum}`:"date"===e.type?`Date must be ${e.exact?"exactly":e.inclusive?"smaller than or equal to":"smaller than"} ${new Date(Number(e.maximum))}`:"Invalid input";break;case r.ZodIssueCode.custom:i="Invalid input";break;case r.ZodIssueCode.invalid_intersection_types:i="Intersection results could not be merged";break;case r.ZodIssueCode.not_multiple_of:i=`Number must be a multiple of ${e.multipleOf}`;break;case r.ZodIssueCode.not_finite:i="Number must be finite";break;default:i=t.defaultError,n.util.assertNever(e)}return{message:i}}},250693:function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.date=t.boolean=t.bigint=t.array=t.any=t.coerce=t.ZodFirstPartyTypeKind=t.late=t.ZodSchema=t.Schema=t.custom=t.ZodReadonly=t.ZodPipeline=t.ZodBranded=t.BRAND=t.ZodNaN=t.ZodCatch=t.ZodDefault=t.ZodNullable=t.ZodOptional=t.ZodTransformer=t.ZodEffects=t.ZodPromise=t.ZodNativeEnum=t.ZodEnum=t.ZodLiteral=t.ZodLazy=t.ZodFunction=t.ZodSet=t.ZodMap=t.ZodRecord=t.ZodTuple=t.ZodIntersection=t.ZodDiscriminatedUnion=t.ZodUnion=t.ZodObject=t.ZodArray=t.ZodVoid=t.ZodNever=t.ZodUnknown=t.ZodAny=t.ZodNull=t.ZodUndefined=t.ZodSymbol=t.ZodDate=t.ZodBoolean=t.ZodBigInt=t.ZodNumber=t.ZodString=t.ZodType=void 0,t.NEVER=t.void=t.unknown=t.union=t.undefined=t.tuple=t.transformer=t.symbol=t.string=t.strictObject=t.set=t.record=t.promise=t.preprocess=t.pipeline=t.ostring=t.optional=t.onumber=t.oboolean=t.object=t.number=t.nullable=t.null=t.never=t.nativeEnum=t.nan=t.map=t.literal=t.lazy=t.intersection=t.instanceof=t.function=t.enum=t.effect=t.discriminatedUnion=void 0;const n=i(883531),r=i(19342),o=i(811351),s=i(95819),a=i(816748);class l{constructor(e,t,i,n){this._cachedPath=[],this.parent=e,this.data=t,this._path=i,this._key=n}get path(){return this._cachedPath.length||(this._key instanceof Array?this._cachedPath.push(...this._path,...this._key):this._cachedPath.push(...this._path,this._key)),this._cachedPath}}const c=(e,t)=>{if((0,o.isValid)(t))return{success:!0,data:t.value};if(!e.common.issues.length)throw new Error("Validation failed but no issues detected.");return{success:!1,get error(){if(this._error)return this._error;const t=new a.ZodError(e.common.issues);return this._error=t,this._error}}};function d(e){if(!e)return{};const{errorMap:t,invalid_type_error:i,required_error:n,description:r}=e;if(t&&(i||n))throw new Error('Can\'t use "invalid_type_error" or "required_error" in conjunction with custom error map.');if(t)return{errorMap:t,description:r};return{errorMap:(e,t)=>"invalid_type"!==e.code?{message:t.defaultError}:"undefined"===typeof t.data?{message:null!==n&&void 0!==n?n:t.defaultError}:{message:null!==i&&void 0!==i?i:t.defaultError},description:r}}class p{constructor(e){this.spa=this.safeParseAsync,this._def=e,this.parse=this.parse.bind(this),this.safeParse=this.safeParse.bind(this),this.parseAsync=this.parseAsync.bind(this),this.safeParseAsync=this.safeParseAsync.bind(this),this.spa=this.spa.bind(this),this.refine=this.refine.bind(this),this.refinement=this.refinement.bind(this),this.superRefine=this.superRefine.bind(this),this.optional=this.optional.bind(this),this.nullable=this.nullable.bind(this),this.nullish=this.nullish.bind(this),this.array=this.array.bind(this),this.promise=this.promise.bind(this),this.or=this.or.bind(this),this.and=this.and.bind(this),this.transform=this.transform.bind(this),this.brand=this.brand.bind(this),this.default=this.default.bind(this),this.catch=this.catch.bind(this),this.describe=this.describe.bind(this),this.pipe=this.pipe.bind(this),this.readonly=this.readonly.bind(this),this.isNullable=this.isNullable.bind(this),this.isOptional=this.isOptional.bind(this)}get description(){return this._def.description}_getType(e){return(0,s.getParsedType)(e.data)}_getOrReturnCtx(e,t){return t||{common:e.parent.common,data:e.data,parsedType:(0,s.getParsedType)(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}_processInputParams(e){return{status:new o.ParseStatus,ctx:{common:e.parent.common,data:e.data,parsedType:(0,s.getParsedType)(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}}_parseSync(e){const t=this._parse(e);if((0,o.isAsync)(t))throw new Error("Synchronous parse encountered promise.");return t}_parseAsync(e){const t=this._parse(e);return Promise.resolve(t)}parse(e,t){const i=this.safeParse(e,t);if(i.success)return i.data;throw i.error}safeParse(e,t){var i;const n={common:{issues:[],async:null!==(i=null===t||void 0===t?void 0:t.async)&&void 0!==i&&i,contextualErrorMap:null===t||void 0===t?void 0:t.errorMap},path:(null===t||void 0===t?void 0:t.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:(0,s.getParsedType)(e)},r=this._parseSync({data:e,path:n.path,parent:n});return c(n,r)}async parseAsync(e,t){const i=await this.safeParseAsync(e,t);if(i.success)return i.data;throw i.error}async safeParseAsync(e,t){const i={common:{issues:[],contextualErrorMap:null===t||void 0===t?void 0:t.errorMap,async:!0},path:(null===t||void 0===t?void 0:t.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:(0,s.getParsedType)(e)},n=this._parse({data:e,path:i.path,parent:i}),r=await((0,o.isAsync)(n)?n:Promise.resolve(n));return c(i,r)}refine(e,t){const i=e=>"string"===typeof t||"undefined"===typeof t?{message:t}:"function"===typeof t?t(e):t;return this._refinement(((t,n)=>{const r=e(t),o=()=>n.addIssue({code:a.ZodIssueCode.custom,...i(t)});return"undefined"!==typeof Promise&&r instanceof Promise?r.then((e=>!!e||(o(),!1))):!!r||(o(),!1)}))}refinement(e,t){return this._refinement(((i,n)=>!!e(i)||(n.addIssue("function"===typeof t?t(i,n):t),!1)))}_refinement(e){return new X({schema:this,typeName:ae.ZodEffects,effect:{type:"refinement",refinement:e}})}superRefine(e){return this._refinement(e)}optional(){return H.create(this,this._def)}nullable(){return ee.create(this,this._def)}nullish(){return this.nullable().optional()}array(){return k.create(this,this._def)}promise(){return J.create(this,this._def)}or(e){return D.create([this,e],this._def)}and(e){return j.create(this,e,this._def)}transform(e){return new X({...d(this._def),schema:this,typeName:ae.ZodEffects,effect:{type:"transform",transform:e}})}default(e){const t="function"===typeof e?e:()=>e;return new te({...d(this._def),innerType:this,defaultValue:t,typeName:ae.ZodDefault})}brand(){return new re({typeName:ae.ZodBranded,type:this,...d(this._def)})}catch(e){const t="function"===typeof e?e:()=>e;return new ie({...d(this._def),innerType:this,catchValue:t,typeName:ae.ZodCatch})}describe(e){return new(0,this.constructor)({...this._def,description:e})}pipe(e){return oe.create(this,e)}readonly(){return se.create(this)}isOptional(){return this.safeParse(void 0).success}isNullable(){return this.safeParse(null).success}}t.ZodType=p,t.Schema=p,t.ZodSchema=p;const u=/^c[^\s-]{8,}$/i,h=/^[a-z][a-z0-9]*$/,m=/^[0-9A-HJKMNP-TV-Z]{26}$/,f=/^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i,y=/^(?!\.)(?!.*\.\.)([A-Z0-9_+-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;let g;const T=/^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/,b=/^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;class _ extends p{_parse(e){this._def.coerce&&(e.data=String(e.data));if(this._getType(e)!==s.ZodParsedType.string){const t=this._getOrReturnCtx(e);return(0,o.addIssueToContext)(t,{code:a.ZodIssueCode.invalid_type,expected:s.ZodParsedType.string,received:t.parsedType}),o.INVALID}const t=new o.ParseStatus;let i;for(const d of this._def.checks)if("min"===d.kind)e.data.length<d.value&&(i=this._getOrReturnCtx(e,i),(0,o.addIssueToContext)(i,{code:a.ZodIssueCode.too_small,minimum:d.value,type:"string",inclusive:!0,exact:!1,message:d.message}),t.dirty());else if("max"===d.kind)e.data.length>d.value&&(i=this._getOrReturnCtx(e,i),(0,o.addIssueToContext)(i,{code:a.ZodIssueCode.too_big,maximum:d.value,type:"string",inclusive:!0,exact:!1,message:d.message}),t.dirty());else if("length"===d.kind){const n=e.data.length>d.value,r=e.data.length<d.value;(n||r)&&(i=this._getOrReturnCtx(e,i),n?(0,o.addIssueToContext)(i,{code:a.ZodIssueCode.too_big,maximum:d.value,type:"string",inclusive:!0,exact:!0,message:d.message}):r&&(0,o.addIssueToContext)(i,{code:a.ZodIssueCode.too_small,minimum:d.value,type:"string",inclusive:!0,exact:!0,message:d.message}),t.dirty())}else if("email"===d.kind)y.test(e.data)||(i=this._getOrReturnCtx(e,i),(0,o.addIssueToContext)(i,{validation:"email",code:a.ZodIssueCode.invalid_string,message:d.message}),t.dirty());else if("emoji"===d.kind)g||(g=new RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$","u")),g.test(e.data)||(i=this._getOrReturnCtx(e,i),(0,o.addIssueToContext)(i,{validation:"emoji",code:a.ZodIssueCode.invalid_string,message:d.message}),t.dirty());else if("uuid"===d.kind)f.test(e.data)||(i=this._getOrReturnCtx(e,i),(0,o.addIssueToContext)(i,{validation:"uuid",code:a.ZodIssueCode.invalid_string,message:d.message}),t.dirty());else if("cuid"===d.kind)u.test(e.data)||(i=this._getOrReturnCtx(e,i),(0,o.addIssueToContext)(i,{validation:"cuid",code:a.ZodIssueCode.invalid_string,message:d.message}),t.dirty());else if("cuid2"===d.kind)h.test(e.data)||(i=this._getOrReturnCtx(e,i),(0,o.addIssueToContext)(i,{validation:"cuid2",code:a.ZodIssueCode.invalid_string,message:d.message}),t.dirty());else if("ulid"===d.kind)m.test(e.data)||(i=this._getOrReturnCtx(e,i),(0,o.addIssueToContext)(i,{validation:"ulid",code:a.ZodIssueCode.invalid_string,message:d.message}),t.dirty());else if("url"===d.kind)try{new URL(e.data)}catch(c){i=this._getOrReturnCtx(e,i),(0,o.addIssueToContext)(i,{validation:"url",code:a.ZodIssueCode.invalid_string,message:d.message}),t.dirty()}else if("regex"===d.kind){d.regex.lastIndex=0;d.regex.test(e.data)||(i=this._getOrReturnCtx(e,i),(0,o.addIssueToContext)(i,{validation:"regex",code:a.ZodIssueCode.invalid_string,message:d.message}),t.dirty())}else if("trim"===d.kind)e.data=e.data.trim();else if("includes"===d.kind)e.data.includes(d.value,d.position)||(i=this._getOrReturnCtx(e,i),(0,o.addIssueToContext)(i,{code:a.ZodIssueCode.invalid_string,validation:{includes:d.value,position:d.position},message:d.message}),t.dirty());else if("toLowerCase"===d.kind)e.data=e.data.toLowerCase();else if("toUpperCase"===d.kind)e.data=e.data.toUpperCase();else if("startsWith"===d.kind)e.data.startsWith(d.value)||(i=this._getOrReturnCtx(e,i),(0,o.addIssueToContext)(i,{code:a.ZodIssueCode.invalid_string,validation:{startsWith:d.value},message:d.message}),t.dirty());else if("endsWith"===d.kind)e.data.endsWith(d.value)||(i=this._getOrReturnCtx(e,i),(0,o.addIssueToContext)(i,{code:a.ZodIssueCode.invalid_string,validation:{endsWith:d.value},message:d.message}),t.dirty());else if("datetime"===d.kind){((l=d).precision?l.offset?new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${l.precision}}(([+-]\\d{2}(:?\\d{2})?)|Z)$`):new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${l.precision}}Z$`):0===l.precision?l.offset?new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(([+-]\\d{2}(:?\\d{2})?)|Z)$"):new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$"):l.offset?new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}(:?\\d{2})?)|Z)$"):new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$")).test(e.data)||(i=this._getOrReturnCtx(e,i),(0,o.addIssueToContext)(i,{code:a.ZodIssueCode.invalid_string,validation:"datetime",message:d.message}),t.dirty())}else"ip"===d.kind?(n=e.data,("v4"!==(r=d.version)&&r||!T.test(n))&&("v6"!==r&&r||!b.test(n))&&(i=this._getOrReturnCtx(e,i),(0,o.addIssueToContext)(i,{validation:"ip",code:a.ZodIssueCode.invalid_string,message:d.message}),t.dirty())):s.util.assertNever(d);var n,r,l;return{status:t.value,value:e.data}}_regex(e,t,i){return this.refinement((t=>e.test(t)),{validation:t,code:a.ZodIssueCode.invalid_string,...r.errorUtil.errToObj(i)})}_addCheck(e){return new _({...this._def,checks:[...this._def.checks,e]})}email(e){return this._addCheck({kind:"email",...r.errorUtil.errToObj(e)})}url(e){return this._addCheck({kind:"url",...r.errorUtil.errToObj(e)})}emoji(e){return this._addCheck({kind:"emoji",...r.errorUtil.errToObj(e)})}uuid(e){return this._addCheck({kind:"uuid",...r.errorUtil.errToObj(e)})}cuid(e){return this._addCheck({kind:"cuid",...r.errorUtil.errToObj(e)})}cuid2(e){return this._addCheck({kind:"cuid2",...r.errorUtil.errToObj(e)})}ulid(e){return this._addCheck({kind:"ulid",...r.errorUtil.errToObj(e)})}ip(e){return this._addCheck({kind:"ip",...r.errorUtil.errToObj(e)})}datetime(e){var t;return"string"===typeof e?this._addCheck({kind:"datetime",precision:null,offset:!1,message:e}):this._addCheck({kind:"datetime",precision:"undefined"===typeof(null===e||void 0===e?void 0:e.precision)?null:null===e||void 0===e?void 0:e.precision,offset:null!==(t=null===e||void 0===e?void 0:e.offset)&&void 0!==t&&t,...r.errorUtil.errToObj(null===e||void 0===e?void 0:e.message)})}regex(e,t){return this._addCheck({kind:"regex",regex:e,...r.errorUtil.errToObj(t)})}includes(e,t){return this._addCheck({kind:"includes",value:e,position:null===t||void 0===t?void 0:t.position,...r.errorUtil.errToObj(null===t||void 0===t?void 0:t.message)})}startsWith(e,t){return this._addCheck({kind:"startsWith",value:e,...r.errorUtil.errToObj(t)})}endsWith(e,t){return this._addCheck({kind:"endsWith",value:e,...r.errorUtil.errToObj(t)})}min(e,t){return this._addCheck({kind:"min",value:e,...r.errorUtil.errToObj(t)})}max(e,t){return this._addCheck({kind:"max",value:e,...r.errorUtil.errToObj(t)})}length(e,t){return this._addCheck({kind:"length",value:e,...r.errorUtil.errToObj(t)})}nonempty(e){return this.min(1,r.errorUtil.errToObj(e))}trim(){return new _({...this._def,checks:[...this._def.checks,{kind:"trim"}]})}toLowerCase(){return new _({...this._def,checks:[...this._def.checks,{kind:"toLowerCase"}]})}toUpperCase(){return new _({...this._def,checks:[...this._def.checks,{kind:"toUpperCase"}]})}get isDatetime(){return!!this._def.checks.find((e=>"datetime"===e.kind))}get isEmail(){return!!this._def.checks.find((e=>"email"===e.kind))}get isURL(){return!!this._def.checks.find((e=>"url"===e.kind))}get isEmoji(){return!!this._def.checks.find((e=>"emoji"===e.kind))}get isUUID(){return!!this._def.checks.find((e=>"uuid"===e.kind))}get isCUID(){return!!this._def.checks.find((e=>"cuid"===e.kind))}get isCUID2(){return!!this._def.checks.find((e=>"cuid2"===e.kind))}get isULID(){return!!this._def.checks.find((e=>"ulid"===e.kind))}get isIP(){return!!this._def.checks.find((e=>"ip"===e.kind))}get minLength(){let e=null;for(const t of this._def.checks)"min"===t.kind&&(null===e||t.value>e)&&(e=t.value);return e}get maxLength(){let e=null;for(const t of this._def.checks)"max"===t.kind&&(null===e||t.value<e)&&(e=t.value);return e}}function I(e,t){const i=(e.toString().split(".")[1]||"").length,n=(t.toString().split(".")[1]||"").length,r=i>n?i:n;return parseInt(e.toFixed(r).replace(".",""))%parseInt(t.toFixed(r).replace(".",""))/Math.pow(10,r)}t.ZodString=_,_.create=e=>{var t;return new _({checks:[],typeName:ae.ZodString,coerce:null!==(t=null===e||void 0===e?void 0:e.coerce)&&void 0!==t&&t,...d(e)})};class v extends p{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte,this.step=this.multipleOf}_parse(e){this._def.coerce&&(e.data=Number(e.data));if(this._getType(e)!==s.ZodParsedType.number){const t=this._getOrReturnCtx(e);return(0,o.addIssueToContext)(t,{code:a.ZodIssueCode.invalid_type,expected:s.ZodParsedType.number,received:t.parsedType}),o.INVALID}let t;const i=new o.ParseStatus;for(const n of this._def.checks)if("int"===n.kind)s.util.isInteger(e.data)||(t=this._getOrReturnCtx(e,t),(0,o.addIssueToContext)(t,{code:a.ZodIssueCode.invalid_type,expected:"integer",received:"float",message:n.message}),i.dirty());else if("min"===n.kind){(n.inclusive?e.data<n.value:e.data<=n.value)&&(t=this._getOrReturnCtx(e,t),(0,o.addIssueToContext)(t,{code:a.ZodIssueCode.too_small,minimum:n.value,type:"number",inclusive:n.inclusive,exact:!1,message:n.message}),i.dirty())}else if("max"===n.kind){(n.inclusive?e.data>n.value:e.data>=n.value)&&(t=this._getOrReturnCtx(e,t),(0,o.addIssueToContext)(t,{code:a.ZodIssueCode.too_big,maximum:n.value,type:"number",inclusive:n.inclusive,exact:!1,message:n.message}),i.dirty())}else"multipleOf"===n.kind?0!==I(e.data,n.value)&&(t=this._getOrReturnCtx(e,t),(0,o.addIssueToContext)(t,{code:a.ZodIssueCode.not_multiple_of,multipleOf:n.value,message:n.message}),i.dirty()):"finite"===n.kind?Number.isFinite(e.data)||(t=this._getOrReturnCtx(e,t),(0,o.addIssueToContext)(t,{code:a.ZodIssueCode.not_finite,message:n.message}),i.dirty()):s.util.assertNever(n);return{status:i.value,value:e.data}}gte(e,t){return this.setLimit("min",e,!0,r.errorUtil.toString(t))}gt(e,t){return this.setLimit("min",e,!1,r.errorUtil.toString(t))}lte(e,t){return this.setLimit("max",e,!0,r.errorUtil.toString(t))}lt(e,t){return this.setLimit("max",e,!1,r.errorUtil.toString(t))}setLimit(e,t,i,n){return new v({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:i,message:r.errorUtil.toString(n)}]})}_addCheck(e){return new v({...this._def,checks:[...this._def.checks,e]})}int(e){return this._addCheck({kind:"int",message:r.errorUtil.toString(e)})}positive(e){return this._addCheck({kind:"min",value:0,inclusive:!1,message:r.errorUtil.toString(e)})}negative(e){return this._addCheck({kind:"max",value:0,inclusive:!1,message:r.errorUtil.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:0,inclusive:!0,message:r.errorUtil.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:0,inclusive:!0,message:r.errorUtil.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:r.errorUtil.toString(t)})}finite(e){return this._addCheck({kind:"finite",message:r.errorUtil.toString(e)})}safe(e){return this._addCheck({kind:"min",inclusive:!0,value:Number.MIN_SAFE_INTEGER,message:r.errorUtil.toString(e)})._addCheck({kind:"max",inclusive:!0,value:Number.MAX_SAFE_INTEGER,message:r.errorUtil.toString(e)})}get minValue(){let e=null;for(const t of this._def.checks)"min"===t.kind&&(null===e||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)"max"===t.kind&&(null===e||t.value<e)&&(e=t.value);return e}get isInt(){return!!this._def.checks.find((e=>"int"===e.kind||"multipleOf"===e.kind&&s.util.isInteger(e.value)))}get isFinite(){let e=null,t=null;for(const i of this._def.checks){if("finite"===i.kind||"int"===i.kind||"multipleOf"===i.kind)return!0;"min"===i.kind?(null===t||i.value>t)&&(t=i.value):"max"===i.kind&&(null===e||i.value<e)&&(e=i.value)}return Number.isFinite(t)&&Number.isFinite(e)}}t.ZodNumber=v,v.create=e=>new v({checks:[],typeName:ae.ZodNumber,coerce:(null===e||void 0===e?void 0:e.coerce)||!1,...d(e)});class S extends p{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte}_parse(e){this._def.coerce&&(e.data=BigInt(e.data));if(this._getType(e)!==s.ZodParsedType.bigint){const t=this._getOrReturnCtx(e);return(0,o.addIssueToContext)(t,{code:a.ZodIssueCode.invalid_type,expected:s.ZodParsedType.bigint,received:t.parsedType}),o.INVALID}let t;const i=new o.ParseStatus;for(const n of this._def.checks)if("min"===n.kind){(n.inclusive?e.data<n.value:e.data<=n.value)&&(t=this._getOrReturnCtx(e,t),(0,o.addIssueToContext)(t,{code:a.ZodIssueCode.too_small,type:"bigint",minimum:n.value,inclusive:n.inclusive,message:n.message}),i.dirty())}else if("max"===n.kind){(n.inclusive?e.data>n.value:e.data>=n.value)&&(t=this._getOrReturnCtx(e,t),(0,o.addIssueToContext)(t,{code:a.ZodIssueCode.too_big,type:"bigint",maximum:n.value,inclusive:n.inclusive,message:n.message}),i.dirty())}else"multipleOf"===n.kind?e.data%n.value!==BigInt(0)&&(t=this._getOrReturnCtx(e,t),(0,o.addIssueToContext)(t,{code:a.ZodIssueCode.not_multiple_of,multipleOf:n.value,message:n.message}),i.dirty()):s.util.assertNever(n);return{status:i.value,value:e.data}}gte(e,t){return this.setLimit("min",e,!0,r.errorUtil.toString(t))}gt(e,t){return this.setLimit("min",e,!1,r.errorUtil.toString(t))}lte(e,t){return this.setLimit("max",e,!0,r.errorUtil.toString(t))}lt(e,t){return this.setLimit("max",e,!1,r.errorUtil.toString(t))}setLimit(e,t,i,n){return new S({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:i,message:r.errorUtil.toString(n)}]})}_addCheck(e){return new S({...this._def,checks:[...this._def.checks,e]})}positive(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!1,message:r.errorUtil.toString(e)})}negative(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!1,message:r.errorUtil.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!0,message:r.errorUtil.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!0,message:r.errorUtil.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:r.errorUtil.toString(t)})}get minValue(){let e=null;for(const t of this._def.checks)"min"===t.kind&&(null===e||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)"max"===t.kind&&(null===e||t.value<e)&&(e=t.value);return e}}t.ZodBigInt=S,S.create=e=>{var t;return new S({checks:[],typeName:ae.ZodBigInt,coerce:null!==(t=null===e||void 0===e?void 0:e.coerce)&&void 0!==t&&t,...d(e)})};class C extends p{_parse(e){this._def.coerce&&(e.data=Boolean(e.data));if(this._getType(e)!==s.ZodParsedType.boolean){const t=this._getOrReturnCtx(e);return(0,o.addIssueToContext)(t,{code:a.ZodIssueCode.invalid_type,expected:s.ZodParsedType.boolean,received:t.parsedType}),o.INVALID}return(0,o.OK)(e.data)}}t.ZodBoolean=C,C.create=e=>new C({typeName:ae.ZodBoolean,coerce:(null===e||void 0===e?void 0:e.coerce)||!1,...d(e)});class L extends p{_parse(e){this._def.coerce&&(e.data=new Date(e.data));if(this._getType(e)!==s.ZodParsedType.date){const t=this._getOrReturnCtx(e);return(0,o.addIssueToContext)(t,{code:a.ZodIssueCode.invalid_type,expected:s.ZodParsedType.date,received:t.parsedType}),o.INVALID}if(isNaN(e.data.getTime())){const t=this._getOrReturnCtx(e);return(0,o.addIssueToContext)(t,{code:a.ZodIssueCode.invalid_date}),o.INVALID}const t=new o.ParseStatus;let i;for(const n of this._def.checks)"min"===n.kind?e.data.getTime()<n.value&&(i=this._getOrReturnCtx(e,i),(0,o.addIssueToContext)(i,{code:a.ZodIssueCode.too_small,message:n.message,inclusive:!0,exact:!1,minimum:n.value,type:"date"}),t.dirty()):"max"===n.kind?e.data.getTime()>n.value&&(i=this._getOrReturnCtx(e,i),(0,o.addIssueToContext)(i,{code:a.ZodIssueCode.too_big,message:n.message,inclusive:!0,exact:!1,maximum:n.value,type:"date"}),t.dirty()):s.util.assertNever(n);return{status:t.value,value:new Date(e.data.getTime())}}_addCheck(e){return new L({...this._def,checks:[...this._def.checks,e]})}min(e,t){return this._addCheck({kind:"min",value:e.getTime(),message:r.errorUtil.toString(t)})}max(e,t){return this._addCheck({kind:"max",value:e.getTime(),message:r.errorUtil.toString(t)})}get minDate(){let e=null;for(const t of this._def.checks)"min"===t.kind&&(null===e||t.value>e)&&(e=t.value);return null!=e?new Date(e):null}get maxDate(){let e=null;for(const t of this._def.checks)"max"===t.kind&&(null===e||t.value<e)&&(e=t.value);return null!=e?new Date(e):null}}t.ZodDate=L,L.create=e=>new L({checks:[],coerce:(null===e||void 0===e?void 0:e.coerce)||!1,typeName:ae.ZodDate,...d(e)});class x extends p{_parse(e){if(this._getType(e)!==s.ZodParsedType.symbol){const t=this._getOrReturnCtx(e);return(0,o.addIssueToContext)(t,{code:a.ZodIssueCode.invalid_type,expected:s.ZodParsedType.symbol,received:t.parsedType}),o.INVALID}return(0,o.OK)(e.data)}}t.ZodSymbol=x,x.create=e=>new x({typeName:ae.ZodSymbol,...d(e)});class E extends p{_parse(e){if(this._getType(e)!==s.ZodParsedType.undefined){const t=this._getOrReturnCtx(e);return(0,o.addIssueToContext)(t,{code:a.ZodIssueCode.invalid_type,expected:s.ZodParsedType.undefined,received:t.parsedType}),o.INVALID}return(0,o.OK)(e.data)}}t.ZodUndefined=E,E.create=e=>new E({typeName:ae.ZodUndefined,...d(e)});class R extends p{_parse(e){if(this._getType(e)!==s.ZodParsedType.null){const t=this._getOrReturnCtx(e);return(0,o.addIssueToContext)(t,{code:a.ZodIssueCode.invalid_type,expected:s.ZodParsedType.null,received:t.parsedType}),o.INVALID}return(0,o.OK)(e.data)}}t.ZodNull=R,R.create=e=>new R({typeName:ae.ZodNull,...d(e)});class N extends p{constructor(){super(...arguments),this._any=!0}_parse(e){return(0,o.OK)(e.data)}}t.ZodAny=N,N.create=e=>new N({typeName:ae.ZodAny,...d(e)});class P extends p{constructor(){super(...arguments),this._unknown=!0}_parse(e){return(0,o.OK)(e.data)}}t.ZodUnknown=P,P.create=e=>new P({typeName:ae.ZodUnknown,...d(e)});class w extends p{_parse(e){const t=this._getOrReturnCtx(e);return(0,o.addIssueToContext)(t,{code:a.ZodIssueCode.invalid_type,expected:s.ZodParsedType.never,received:t.parsedType}),o.INVALID}}t.ZodNever=w,w.create=e=>new w({typeName:ae.ZodNever,...d(e)});class M extends p{_parse(e){if(this._getType(e)!==s.ZodParsedType.undefined){const t=this._getOrReturnCtx(e);return(0,o.addIssueToContext)(t,{code:a.ZodIssueCode.invalid_type,expected:s.ZodParsedType.void,received:t.parsedType}),o.INVALID}return(0,o.OK)(e.data)}}t.ZodVoid=M,M.create=e=>new M({typeName:ae.ZodVoid,...d(e)});class k extends p{_parse(e){const{ctx:t,status:i}=this._processInputParams(e),n=this._def;if(t.parsedType!==s.ZodParsedType.array)return(0,o.addIssueToContext)(t,{code:a.ZodIssueCode.invalid_type,expected:s.ZodParsedType.array,received:t.parsedType}),o.INVALID;if(null!==n.exactLength){const e=t.data.length>n.exactLength.value,r=t.data.length<n.exactLength.value;(e||r)&&((0,o.addIssueToContext)(t,{code:e?a.ZodIssueCode.too_big:a.ZodIssueCode.too_small,minimum:r?n.exactLength.value:void 0,maximum:e?n.exactLength.value:void 0,type:"array",inclusive:!0,exact:!0,message:n.exactLength.message}),i.dirty())}if(null!==n.minLength&&t.data.length<n.minLength.value&&((0,o.addIssueToContext)(t,{code:a.ZodIssueCode.too_small,minimum:n.minLength.value,type:"array",inclusive:!0,exact:!1,message:n.minLength.message}),i.dirty()),null!==n.maxLength&&t.data.length>n.maxLength.value&&((0,o.addIssueToContext)(t,{code:a.ZodIssueCode.too_big,maximum:n.maxLength.value,type:"array",inclusive:!0,exact:!1,message:n.maxLength.message}),i.dirty()),t.common.async)return Promise.all([...t.data].map(((e,i)=>n.type._parseAsync(new l(t,e,t.path,i))))).then((e=>o.ParseStatus.mergeArray(i,e)));const r=[...t.data].map(((e,i)=>n.type._parseSync(new l(t,e,t.path,i))));return o.ParseStatus.mergeArray(i,r)}get element(){return this._def.type}min(e,t){return new k({...this._def,minLength:{value:e,message:r.errorUtil.toString(t)}})}max(e,t){return new k({...this._def,maxLength:{value:e,message:r.errorUtil.toString(t)}})}length(e,t){return new k({...this._def,exactLength:{value:e,message:r.errorUtil.toString(t)}})}nonempty(e){return this.min(1,e)}}function O(e){if(e instanceof A){const t={};for(const i in e.shape){const n=e.shape[i];t[i]=H.create(O(n))}return new A({...e._def,shape:()=>t})}return e instanceof k?new k({...e._def,type:O(e.element)}):e instanceof H?H.create(O(e.unwrap())):e instanceof ee?ee.create(O(e.unwrap())):e instanceof F?F.create(e.items.map((e=>O(e)))):e}t.ZodArray=k,k.create=(e,t)=>new k({type:e,minLength:null,maxLength:null,exactLength:null,typeName:ae.ZodArray,...d(t)});class A extends p{constructor(){super(...arguments),this._cached=null,this.nonstrict=this.passthrough,this.augment=this.extend}_getCached(){if(null!==this._cached)return this._cached;const e=this._def.shape(),t=s.util.objectKeys(e);return this._cached={shape:e,keys:t}}_parse(e){if(this._getType(e)!==s.ZodParsedType.object){const t=this._getOrReturnCtx(e);return(0,o.addIssueToContext)(t,{code:a.ZodIssueCode.invalid_type,expected:s.ZodParsedType.object,received:t.parsedType}),o.INVALID}const{status:t,ctx:i}=this._processInputParams(e),{shape:n,keys:r}=this._getCached(),c=[];if(!(this._def.catchall instanceof w&&"strip"===this._def.unknownKeys))for(const o in i.data)r.includes(o)||c.push(o);const d=[];for(const o of r){const e=n[o],t=i.data[o];d.push({key:{status:"valid",value:o},value:e._parse(new l(i,t,i.path,o)),alwaysSet:o in i.data})}if(this._def.catchall instanceof w){const e=this._def.unknownKeys;if("passthrough"===e)for(const t of c)d.push({key:{status:"valid",value:t},value:{status:"valid",value:i.data[t]}});else if("strict"===e)c.length>0&&((0,o.addIssueToContext)(i,{code:a.ZodIssueCode.unrecognized_keys,keys:c}),t.dirty());else if("strip"!==e)throw new Error("Internal ZodObject error: invalid unknownKeys value.")}else{const e=this._def.catchall;for(const t of c){const n=i.data[t];d.push({key:{status:"valid",value:t},value:e._parse(new l(i,n,i.path,t)),alwaysSet:t in i.data})}}return i.common.async?Promise.resolve().then((async()=>{const e=[];for(const t of d){const i=await t.key;e.push({key:i,value:await t.value,alwaysSet:t.alwaysSet})}return e})).then((e=>o.ParseStatus.mergeObjectSync(t,e))):o.ParseStatus.mergeObjectSync(t,d)}get shape(){return this._def.shape()}strict(e){return r.errorUtil.errToObj,new A({...this._def,unknownKeys:"strict",...void 0!==e?{errorMap:(t,i)=>{var n,o,s,a;const l=null!==(s=null===(o=(n=this._def).errorMap)||void 0===o?void 0:o.call(n,t,i).message)&&void 0!==s?s:i.defaultError;return"unrecognized_keys"===t.code?{message:null!==(a=r.errorUtil.errToObj(e).message)&&void 0!==a?a:l}:{message:l}}}:{}})}strip(){return new A({...this._def,unknownKeys:"strip"})}passthrough(){return new A({...this._def,unknownKeys:"passthrough"})}extend(e){return new A({...this._def,shape:()=>({...this._def.shape(),...e})})}merge(e){return new A({unknownKeys:e._def.unknownKeys,catchall:e._def.catchall,shape:()=>({...this._def.shape(),...e._def.shape()}),typeName:ae.ZodObject})}setKey(e,t){return this.augment({[e]:t})}catchall(e){return new A({...this._def,catchall:e})}pick(e){const t={};return s.util.objectKeys(e).forEach((i=>{e[i]&&this.shape[i]&&(t[i]=this.shape[i])})),new A({...this._def,shape:()=>t})}omit(e){const t={};return s.util.objectKeys(this.shape).forEach((i=>{e[i]||(t[i]=this.shape[i])})),new A({...this._def,shape:()=>t})}deepPartial(){return O(this)}partial(e){const t={};return s.util.objectKeys(this.shape).forEach((i=>{const n=this.shape[i];e&&!e[i]?t[i]=n:t[i]=n.optional()})),new A({...this._def,shape:()=>t})}required(e){const t={};return s.util.objectKeys(this.shape).forEach((i=>{if(e&&!e[i])t[i]=this.shape[i];else{let e=this.shape[i];for(;e instanceof H;)e=e._def.innerType;t[i]=e}})),new A({...this._def,shape:()=>t})}keyof(){return K(s.util.objectKeys(this.shape))}}t.ZodObject=A,A.create=(e,t)=>new A({shape:()=>e,unknownKeys:"strip",catchall:w.create(),typeName:ae.ZodObject,...d(t)}),A.strictCreate=(e,t)=>new A({shape:()=>e,unknownKeys:"strict",catchall:w.create(),typeName:ae.ZodObject,...d(t)}),A.lazycreate=(e,t)=>new A({shape:e,unknownKeys:"strip",catchall:w.create(),typeName:ae.ZodObject,...d(t)});class D extends p{_parse(e){const{ctx:t}=this._processInputParams(e),i=this._def.options;if(t.common.async)return Promise.all(i.map((async e=>{const i={...t,common:{...t.common,issues:[]},parent:null};return{result:await e._parseAsync({data:t.data,path:t.path,parent:i}),ctx:i}}))).then((function(e){for(const t of e)if("valid"===t.result.status)return t.result;for(const n of e)if("dirty"===n.result.status)return t.common.issues.push(...n.ctx.common.issues),n.result;const i=e.map((e=>new a.ZodError(e.ctx.common.issues)));return(0,o.addIssueToContext)(t,{code:a.ZodIssueCode.invalid_union,unionErrors:i}),o.INVALID}));{let e;const n=[];for(const o of i){const i={...t,common:{...t.common,issues:[]},parent:null},r=o._parseSync({data:t.data,path:t.path,parent:i});if("valid"===r.status)return r;"dirty"!==r.status||e||(e={result:r,ctx:i}),i.common.issues.length&&n.push(i.common.issues)}if(e)return t.common.issues.push(...e.ctx.common.issues),e.result;const r=n.map((e=>new a.ZodError(e)));return(0,o.addIssueToContext)(t,{code:a.ZodIssueCode.invalid_union,unionErrors:r}),o.INVALID}}get options(){return this._def.options}}t.ZodUnion=D,D.create=(e,t)=>new D({options:e,typeName:ae.ZodUnion,...d(t)});const U=e=>e instanceof W?U(e.schema):e instanceof X?U(e.innerType()):e instanceof Q?[e.value]:e instanceof Y?e.options:e instanceof $?Object.keys(e.enum):e instanceof te?U(e._def.innerType):e instanceof E?[void 0]:e instanceof R?[null]:null;class Z extends p{_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==s.ZodParsedType.object)return(0,o.addIssueToContext)(t,{code:a.ZodIssueCode.invalid_type,expected:s.ZodParsedType.object,received:t.parsedType}),o.INVALID;const i=this.discriminator,n=t.data[i],r=this.optionsMap.get(n);return r?t.common.async?r._parseAsync({data:t.data,path:t.path,parent:t}):r._parseSync({data:t.data,path:t.path,parent:t}):((0,o.addIssueToContext)(t,{code:a.ZodIssueCode.invalid_union_discriminator,options:Array.from(this.optionsMap.keys()),path:[i]}),o.INVALID)}get discriminator(){return this._def.discriminator}get options(){return this._def.options}get optionsMap(){return this._def.optionsMap}static create(e,t,i){const n=new Map;for(const r of t){const t=U(r.shape[e]);if(!t)throw new Error(`A discriminator value for key \`${e}\` could not be extracted from all schema options`);for(const i of t){if(n.has(i))throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(i)}`);n.set(i,r)}}return new Z({typeName:ae.ZodDiscriminatedUnion,discriminator:e,options:t,optionsMap:n,...d(i)})}}function z(e,t){const i=(0,s.getParsedType)(e),n=(0,s.getParsedType)(t);if(e===t)return{valid:!0,data:e};if(i===s.ZodParsedType.object&&n===s.ZodParsedType.object){const i=s.util.objectKeys(t),n=s.util.objectKeys(e).filter((e=>-1!==i.indexOf(e))),r={...e,...t};for(const o of n){const i=z(e[o],t[o]);if(!i.valid)return{valid:!1};r[o]=i.data}return{valid:!0,data:r}}if(i===s.ZodParsedType.array&&n===s.ZodParsedType.array){if(e.length!==t.length)return{valid:!1};const i=[];for(let n=0;n<e.length;n++){const r=z(e[n],t[n]);if(!r.valid)return{valid:!1};i.push(r.data)}return{valid:!0,data:i}}return i===s.ZodParsedType.date&&n===s.ZodParsedType.date&&+e===+t?{valid:!0,data:e}:{valid:!1}}t.ZodDiscriminatedUnion=Z;class j extends p{_parse(e){const{status:t,ctx:i}=this._processInputParams(e),n=(e,n)=>{if((0,o.isAborted)(e)||(0,o.isAborted)(n))return o.INVALID;const r=z(e.value,n.value);return r.valid?(((0,o.isDirty)(e)||(0,o.isDirty)(n))&&t.dirty(),{status:t.value,value:r.data}):((0,o.addIssueToContext)(i,{code:a.ZodIssueCode.invalid_intersection_types}),o.INVALID)};return i.common.async?Promise.all([this._def.left._parseAsync({data:i.data,path:i.path,parent:i}),this._def.right._parseAsync({data:i.data,path:i.path,parent:i})]).then((([e,t])=>n(e,t))):n(this._def.left._parseSync({data:i.data,path:i.path,parent:i}),this._def.right._parseSync({data:i.data,path:i.path,parent:i}))}}t.ZodIntersection=j,j.create=(e,t,i)=>new j({left:e,right:t,typeName:ae.ZodIntersection,...d(i)});class F extends p{_parse(e){const{status:t,ctx:i}=this._processInputParams(e);if(i.parsedType!==s.ZodParsedType.array)return(0,o.addIssueToContext)(i,{code:a.ZodIssueCode.invalid_type,expected:s.ZodParsedType.array,received:i.parsedType}),o.INVALID;if(i.data.length<this._def.items.length)return(0,o.addIssueToContext)(i,{code:a.ZodIssueCode.too_small,minimum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),o.INVALID;!this._def.rest&&i.data.length>this._def.items.length&&((0,o.addIssueToContext)(i,{code:a.ZodIssueCode.too_big,maximum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),t.dirty());const n=[...i.data].map(((e,t)=>{const n=this._def.items[t]||this._def.rest;return n?n._parse(new l(i,e,i.path,t)):null})).filter((e=>!!e));return i.common.async?Promise.all(n).then((e=>o.ParseStatus.mergeArray(t,e))):o.ParseStatus.mergeArray(t,n)}get items(){return this._def.items}rest(e){return new F({...this._def,rest:e})}}t.ZodTuple=F,F.create=(e,t)=>{if(!Array.isArray(e))throw new Error("You must pass an array of schemas to z.tuple([ ... ])");return new F({items:e,typeName:ae.ZodTuple,rest:null,...d(t)})};class V extends p{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:i}=this._processInputParams(e);if(i.parsedType!==s.ZodParsedType.object)return(0,o.addIssueToContext)(i,{code:a.ZodIssueCode.invalid_type,expected:s.ZodParsedType.object,received:i.parsedType}),o.INVALID;const n=[],r=this._def.keyType,c=this._def.valueType;for(const o in i.data)n.push({key:r._parse(new l(i,o,i.path,o)),value:c._parse(new l(i,i.data[o],i.path,o))});return i.common.async?o.ParseStatus.mergeObjectAsync(t,n):o.ParseStatus.mergeObjectSync(t,n)}get element(){return this._def.valueType}static create(e,t,i){return new V(t instanceof p?{keyType:e,valueType:t,typeName:ae.ZodRecord,...d(i)}:{keyType:_.create(),valueType:e,typeName:ae.ZodRecord,...d(t)})}}t.ZodRecord=V;class q extends p{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:i}=this._processInputParams(e);if(i.parsedType!==s.ZodParsedType.map)return(0,o.addIssueToContext)(i,{code:a.ZodIssueCode.invalid_type,expected:s.ZodParsedType.map,received:i.parsedType}),o.INVALID;const n=this._def.keyType,r=this._def.valueType,c=[...i.data.entries()].map((([e,t],o)=>({key:n._parse(new l(i,e,i.path,[o,"key"])),value:r._parse(new l(i,t,i.path,[o,"value"]))})));if(i.common.async){const e=new Map;return Promise.resolve().then((async()=>{for(const i of c){const n=await i.key,r=await i.value;if("aborted"===n.status||"aborted"===r.status)return o.INVALID;"dirty"!==n.status&&"dirty"!==r.status||t.dirty(),e.set(n.value,r.value)}return{status:t.value,value:e}}))}{const e=new Map;for(const i of c){const n=i.key,r=i.value;if("aborted"===n.status||"aborted"===r.status)return o.INVALID;"dirty"!==n.status&&"dirty"!==r.status||t.dirty(),e.set(n.value,r.value)}return{status:t.value,value:e}}}}t.ZodMap=q,q.create=(e,t,i)=>new q({valueType:t,keyType:e,typeName:ae.ZodMap,...d(i)});class G extends p{_parse(e){const{status:t,ctx:i}=this._processInputParams(e);if(i.parsedType!==s.ZodParsedType.set)return(0,o.addIssueToContext)(i,{code:a.ZodIssueCode.invalid_type,expected:s.ZodParsedType.set,received:i.parsedType}),o.INVALID;const n=this._def;null!==n.minSize&&i.data.size<n.minSize.value&&((0,o.addIssueToContext)(i,{code:a.ZodIssueCode.too_small,minimum:n.minSize.value,type:"set",inclusive:!0,exact:!1,message:n.minSize.message}),t.dirty()),null!==n.maxSize&&i.data.size>n.maxSize.value&&((0,o.addIssueToContext)(i,{code:a.ZodIssueCode.too_big,maximum:n.maxSize.value,type:"set",inclusive:!0,exact:!1,message:n.maxSize.message}),t.dirty());const r=this._def.valueType;function c(e){const i=new Set;for(const n of e){if("aborted"===n.status)return o.INVALID;"dirty"===n.status&&t.dirty(),i.add(n.value)}return{status:t.value,value:i}}const d=[...i.data.values()].map(((e,t)=>r._parse(new l(i,e,i.path,t))));return i.common.async?Promise.all(d).then((e=>c(e))):c(d)}min(e,t){return new G({...this._def,minSize:{value:e,message:r.errorUtil.toString(t)}})}max(e,t){return new G({...this._def,maxSize:{value:e,message:r.errorUtil.toString(t)}})}size(e,t){return this.min(e,t).max(e,t)}nonempty(e){return this.min(1,e)}}t.ZodSet=G,G.create=(e,t)=>new G({valueType:e,minSize:null,maxSize:null,typeName:ae.ZodSet,...d(t)});class B extends p{constructor(){super(...arguments),this.validate=this.implement}_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==s.ZodParsedType.function)return(0,o.addIssueToContext)(t,{code:a.ZodIssueCode.invalid_type,expected:s.ZodParsedType.function,received:t.parsedType}),o.INVALID;function i(e,i){return(0,o.makeIssue)({data:e,path:t.path,errorMaps:[t.common.contextualErrorMap,t.schemaErrorMap,(0,n.getErrorMap)(),n.defaultErrorMap].filter((e=>!!e)),issueData:{code:a.ZodIssueCode.invalid_arguments,argumentsError:i}})}function r(e,i){return(0,o.makeIssue)({data:e,path:t.path,errorMaps:[t.common.contextualErrorMap,t.schemaErrorMap,(0,n.getErrorMap)(),n.defaultErrorMap].filter((e=>!!e)),issueData:{code:a.ZodIssueCode.invalid_return_type,returnTypeError:i}})}const l={errorMap:t.common.contextualErrorMap},c=t.data;if(this._def.returns instanceof J){const e=this;return(0,o.OK)((async function(...t){const n=new a.ZodError([]),o=await e._def.args.parseAsync(t,l).catch((e=>{throw n.addIssue(i(t,e)),n})),s=await Reflect.apply(c,this,o);return await e._def.returns._def.type.parseAsync(s,l).catch((e=>{throw n.addIssue(r(s,e)),n}))}))}{const e=this;return(0,o.OK)((function(...t){const n=e._def.args.safeParse(t,l);if(!n.success)throw new a.ZodError([i(t,n.error)]);const o=Reflect.apply(c,this,n.data),s=e._def.returns.safeParse(o,l);if(!s.success)throw new a.ZodError([r(o,s.error)]);return s.data}))}}parameters(){return this._def.args}returnType(){return this._def.returns}args(...e){return new B({...this._def,args:F.create(e).rest(P.create())})}returns(e){return new B({...this._def,returns:e})}implement(e){return this.parse(e)}strictImplement(e){return this.parse(e)}static create(e,t,i){return new B({args:e||F.create([]).rest(P.create()),returns:t||P.create(),typeName:ae.ZodFunction,...d(i)})}}t.ZodFunction=B;class W extends p{get schema(){return this._def.getter()}_parse(e){const{ctx:t}=this._processInputParams(e);return this._def.getter()._parse({data:t.data,path:t.path,parent:t})}}t.ZodLazy=W,W.create=(e,t)=>new W({getter:e,typeName:ae.ZodLazy,...d(t)});class Q extends p{_parse(e){if(e.data!==this._def.value){const t=this._getOrReturnCtx(e);return(0,o.addIssueToContext)(t,{received:t.data,code:a.ZodIssueCode.invalid_literal,expected:this._def.value}),o.INVALID}return{status:"valid",value:e.data}}get value(){return this._def.value}}function K(e,t){return new Y({values:e,typeName:ae.ZodEnum,...d(t)})}t.ZodLiteral=Q,Q.create=(e,t)=>new Q({value:e,typeName:ae.ZodLiteral,...d(t)});class Y extends p{_parse(e){if("string"!==typeof e.data){const t=this._getOrReturnCtx(e),i=this._def.values;return(0,o.addIssueToContext)(t,{expected:s.util.joinValues(i),received:t.parsedType,code:a.ZodIssueCode.invalid_type}),o.INVALID}if(-1===this._def.values.indexOf(e.data)){const t=this._getOrReturnCtx(e),i=this._def.values;return(0,o.addIssueToContext)(t,{received:t.data,code:a.ZodIssueCode.invalid_enum_value,options:i}),o.INVALID}return(0,o.OK)(e.data)}get options(){return this._def.values}get enum(){const e={};for(const t of this._def.values)e[t]=t;return e}get Values(){const e={};for(const t of this._def.values)e[t]=t;return e}get Enum(){const e={};for(const t of this._def.values)e[t]=t;return e}extract(e){return Y.create(e)}exclude(e){return Y.create(this.options.filter((t=>!e.includes(t))))}}t.ZodEnum=Y,Y.create=K;class $ extends p{_parse(e){const t=s.util.getValidEnumValues(this._def.values),i=this._getOrReturnCtx(e);if(i.parsedType!==s.ZodParsedType.string&&i.parsedType!==s.ZodParsedType.number){const e=s.util.objectValues(t);return(0,o.addIssueToContext)(i,{expected:s.util.joinValues(e),received:i.parsedType,code:a.ZodIssueCode.invalid_type}),o.INVALID}if(-1===t.indexOf(e.data)){const e=s.util.objectValues(t);return(0,o.addIssueToContext)(i,{received:i.data,code:a.ZodIssueCode.invalid_enum_value,options:e}),o.INVALID}return(0,o.OK)(e.data)}get enum(){return this._def.values}}t.ZodNativeEnum=$,$.create=(e,t)=>new $({values:e,typeName:ae.ZodNativeEnum,...d(t)});class J extends p{unwrap(){return this._def.type}_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==s.ZodParsedType.promise&&!1===t.common.async)return(0,o.addIssueToContext)(t,{code:a.ZodIssueCode.invalid_type,expected:s.ZodParsedType.promise,received:t.parsedType}),o.INVALID;const i=t.parsedType===s.ZodParsedType.promise?t.data:Promise.resolve(t.data);return(0,o.OK)(i.then((e=>this._def.type.parseAsync(e,{path:t.path,errorMap:t.common.contextualErrorMap}))))}}t.ZodPromise=J,J.create=(e,t)=>new J({type:e,typeName:ae.ZodPromise,...d(t)});class X extends p{innerType(){return this._def.schema}sourceType(){return this._def.schema._def.typeName===ae.ZodEffects?this._def.schema.sourceType():this._def.schema}_parse(e){const{status:t,ctx:i}=this._processInputParams(e),n=this._def.effect||null,r={addIssue:e=>{(0,o.addIssueToContext)(i,e),e.fatal?t.abort():t.dirty()},get path(){return i.path}};if(r.addIssue=r.addIssue.bind(r),"preprocess"===n.type){const e=n.transform(i.data,r);return i.common.issues.length?{status:"dirty",value:i.data}:i.common.async?Promise.resolve(e).then((e=>this._def.schema._parseAsync({data:e,path:i.path,parent:i}))):this._def.schema._parseSync({data:e,path:i.path,parent:i})}if("refinement"===n.type){const e=e=>{const t=n.refinement(e,r);if(i.common.async)return Promise.resolve(t);if(t instanceof Promise)throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");return e};if(!1===i.common.async){const n=this._def.schema._parseSync({data:i.data,path:i.path,parent:i});return"aborted"===n.status?o.INVALID:("dirty"===n.status&&t.dirty(),e(n.value),{status:t.value,value:n.value})}return this._def.schema._parseAsync({data:i.data,path:i.path,parent:i}).then((i=>"aborted"===i.status?o.INVALID:("dirty"===i.status&&t.dirty(),e(i.value).then((()=>({status:t.value,value:i.value}))))))}if("transform"===n.type){if(!1===i.common.async){const e=this._def.schema._parseSync({data:i.data,path:i.path,parent:i});if(!(0,o.isValid)(e))return e;const s=n.transform(e.value,r);if(s instanceof Promise)throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");return{status:t.value,value:s}}return this._def.schema._parseAsync({data:i.data,path:i.path,parent:i}).then((e=>(0,o.isValid)(e)?Promise.resolve(n.transform(e.value,r)).then((e=>({status:t.value,value:e}))):e))}s.util.assertNever(n)}}t.ZodEffects=X,t.ZodTransformer=X,X.create=(e,t,i)=>new X({schema:e,typeName:ae.ZodEffects,effect:t,...d(i)}),X.createWithPreprocess=(e,t,i)=>new X({schema:t,effect:{type:"preprocess",transform:e},typeName:ae.ZodEffects,...d(i)});class H extends p{_parse(e){return this._getType(e)===s.ZodParsedType.undefined?(0,o.OK)(void 0):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}t.ZodOptional=H,H.create=(e,t)=>new H({innerType:e,typeName:ae.ZodOptional,...d(t)});class ee extends p{_parse(e){return this._getType(e)===s.ZodParsedType.null?(0,o.OK)(null):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}t.ZodNullable=ee,ee.create=(e,t)=>new ee({innerType:e,typeName:ae.ZodNullable,...d(t)});class te extends p{_parse(e){const{ctx:t}=this._processInputParams(e);let i=t.data;return t.parsedType===s.ZodParsedType.undefined&&(i=this._def.defaultValue()),this._def.innerType._parse({data:i,path:t.path,parent:t})}removeDefault(){return this._def.innerType}}t.ZodDefault=te,te.create=(e,t)=>new te({innerType:e,typeName:ae.ZodDefault,defaultValue:"function"===typeof t.default?t.default:()=>t.default,...d(t)});class ie extends p{_parse(e){const{ctx:t}=this._processInputParams(e),i={...t,common:{...t.common,issues:[]}},n=this._def.innerType._parse({data:i.data,path:i.path,parent:{...i}});return(0,o.isAsync)(n)?n.then((e=>({status:"valid",value:"valid"===e.status?e.value:this._def.catchValue({get error(){return new a.ZodError(i.common.issues)},input:i.data})}))):{status:"valid",value:"valid"===n.status?n.value:this._def.catchValue({get error(){return new a.ZodError(i.common.issues)},input:i.data})}}removeCatch(){return this._def.innerType}}t.ZodCatch=ie,ie.create=(e,t)=>new ie({innerType:e,typeName:ae.ZodCatch,catchValue:"function"===typeof t.catch?t.catch:()=>t.catch,...d(t)});class ne extends p{_parse(e){if(this._getType(e)!==s.ZodParsedType.nan){const t=this._getOrReturnCtx(e);return(0,o.addIssueToContext)(t,{code:a.ZodIssueCode.invalid_type,expected:s.ZodParsedType.nan,received:t.parsedType}),o.INVALID}return{status:"valid",value:e.data}}}t.ZodNaN=ne,ne.create=e=>new ne({typeName:ae.ZodNaN,...d(e)}),t.BRAND=Symbol("zod_brand");class re extends p{_parse(e){const{ctx:t}=this._processInputParams(e),i=t.data;return this._def.type._parse({data:i,path:t.path,parent:t})}unwrap(){return this._def.type}}t.ZodBranded=re;class oe extends p{_parse(e){const{status:t,ctx:i}=this._processInputParams(e);if(i.common.async){return(async()=>{const e=await this._def.in._parseAsync({data:i.data,path:i.path,parent:i});return"aborted"===e.status?o.INVALID:"dirty"===e.status?(t.dirty(),(0,o.DIRTY)(e.value)):this._def.out._parseAsync({data:e.value,path:i.path,parent:i})})()}{const e=this._def.in._parseSync({data:i.data,path:i.path,parent:i});return"aborted"===e.status?o.INVALID:"dirty"===e.status?(t.dirty(),{status:"dirty",value:e.value}):this._def.out._parseSync({data:e.value,path:i.path,parent:i})}}static create(e,t){return new oe({in:e,out:t,typeName:ae.ZodPipeline})}}t.ZodPipeline=oe;class se extends p{_parse(e){const t=this._def.innerType._parse(e);return(0,o.isValid)(t)&&(t.value=Object.freeze(t.value)),t}}t.ZodReadonly=se,se.create=(e,t)=>new se({innerType:e,typeName:ae.ZodReadonly,...d(t)});var ae;t.custom=(e,t={},i)=>e?N.create().superRefine(((n,r)=>{var o,s;if(!e(n)){const e="function"===typeof t?t(n):"string"===typeof t?{message:t}:t,a=null===(s=null!==(o=e.fatal)&&void 0!==o?o:i)||void 0===s||s,l="string"===typeof e?{message:e}:e;r.addIssue({code:"custom",...l,fatal:a})}})):N.create(),t.late={object:A.lazycreate},function(e){e.ZodString="ZodString",e.ZodNumber="ZodNumber",e.ZodNaN="ZodNaN",e.ZodBigInt="ZodBigInt",e.ZodBoolean="ZodBoolean",e.ZodDate="ZodDate",e.ZodSymbol="ZodSymbol",e.ZodUndefined="ZodUndefined",e.ZodNull="ZodNull",e.ZodAny="ZodAny",e.ZodUnknown="ZodUnknown",e.ZodNever="ZodNever",e.ZodVoid="ZodVoid",e.ZodArray="ZodArray",e.ZodObject="ZodObject",e.ZodUnion="ZodUnion",e.ZodDiscriminatedUnion="ZodDiscriminatedUnion",e.ZodIntersection="ZodIntersection",e.ZodTuple="ZodTuple",e.ZodRecord="ZodRecord",e.ZodMap="ZodMap",e.ZodSet="ZodSet",e.ZodFunction="ZodFunction",e.ZodLazy="ZodLazy",e.ZodLiteral="ZodLiteral",e.ZodEnum="ZodEnum",e.ZodEffects="ZodEffects",e.ZodNativeEnum="ZodNativeEnum",e.ZodOptional="ZodOptional",e.ZodNullable="ZodNullable",e.ZodDefault="ZodDefault",e.ZodCatch="ZodCatch",e.ZodPromise="ZodPromise",e.ZodBranded="ZodBranded",e.ZodPipeline="ZodPipeline",e.ZodReadonly="ZodReadonly"}(ae=t.ZodFirstPartyTypeKind||(t.ZodFirstPartyTypeKind={}));t.instanceof=(e,i={message:`Input not instance of ${e.name}`})=>(0,t.custom)((t=>t instanceof e),i);const le=_.create;t.string=le;const ce=v.create;t.number=ce;const de=ne.create;t.nan=de;const pe=S.create;t.bigint=pe;const ue=C.create;t.boolean=ue;const he=L.create;t.date=he;const me=x.create;t.symbol=me;const fe=E.create;t.undefined=fe;const ye=R.create;t.null=ye;const ge=N.create;t.any=ge;const Te=P.create;t.unknown=Te;const be=w.create;t.never=be;const _e=M.create;t.void=_e;const Ie=k.create;t.array=Ie;const ve=A.create;t.object=ve;const Se=A.strictCreate;t.strictObject=Se;const Ce=D.create;t.union=Ce;const Le=Z.create;t.discriminatedUnion=Le;const xe=j.create;t.intersection=xe;const Ee=F.create;t.tuple=Ee;const Re=V.create;t.record=Re;const Ne=q.create;t.map=Ne;const Pe=G.create;t.set=Pe;const we=B.create;t.function=we;const Me=W.create;t.lazy=Me;const ke=Q.create;t.literal=ke;const Oe=Y.create;t.enum=Oe;const Ae=$.create;t.nativeEnum=Ae;const De=J.create;t.promise=De;const Ue=X.create;t.effect=Ue,t.transformer=Ue;const Ze=H.create;t.optional=Ze;const ze=ee.create;t.nullable=ze;const je=X.createWithPreprocess;t.preprocess=je;const Fe=oe.create;t.pipeline=Fe;t.ostring=()=>le().optional();t.onumber=()=>ce().optional();t.oboolean=()=>ue().optional(),t.coerce={string:e=>_.create({...e,coerce:!0}),number:e=>v.create({...e,coerce:!0}),boolean:e=>C.create({...e,coerce:!0}),bigint:e=>S.create({...e,coerce:!0}),date:e=>L.create({...e,coerce:!0})},t.NEVER=o.INVALID}}]);